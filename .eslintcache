[{"D:\\prj\\questionary\\questionary\\src\\App.js":"1","D:\\prj\\questionary\\questionary\\src\\index.js":"2","D:\\prj\\questionary\\questionary\\src\\components\\DataProvider.jsx":"3","D:\\prj\\questionary\\questionary\\src\\components\\CurrentQuestionForm.jsx":"4","D:\\prj\\questionary\\questionary\\src\\components\\constructor.jsx":"5","D:\\prj\\questionary\\questionary\\src\\components\\Constructor.jsx":"6","D:\\prj\\questionary\\questionary\\src\\components\\AnswerTable.jsx":"7"},{"size":334,"mtime":1607528738624,"results":"8","hashOfConfig":"9"},{"size":173,"mtime":1607528764237,"results":"10","hashOfConfig":"9"},{"size":2150,"mtime":1608215068119,"results":"11","hashOfConfig":"9"},{"size":903,"mtime":1608216203541,"results":"12","hashOfConfig":"9"},{"size":234,"mtime":1608029766119,"results":"13","hashOfConfig":"9"},{"size":234,"mtime":1608031155922,"results":"14","hashOfConfig":"9"},{"size":668,"mtime":1608216206271,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gtla0e",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\prj\\questionary\\questionary\\src\\App.js",[],"D:\\prj\\questionary\\questionary\\src\\index.js",[],["33","34"],"D:\\prj\\questionary\\questionary\\src\\components\\DataProvider.jsx",["35"],"import React, { useState } from \"react\";\r\nimport testDataJsonArray from \"../data/test-data.json\";\r\nimport CurrentQuestionForm from \"./CurrentQuestionForm\";\r\nimport AnswerTable from \"./AnswerTable\";\r\nimport constructor from \"./Constructor\";\r\n\r\nexport default function DataProvider() {\r\n  const [qList, setQList] = useState(\"\");\r\n\r\n  // shuffl array once at the begining\r\n  constructor(() => {\r\n    const shuffle = (list) => list.sort(() => 0.5 - Math.random());\r\n    setQList(shuffle(testDataJsonArray));\r\n  });\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\r\n  const [test, setTest] = useState(\"\");\r\n\r\n  // update current question with an answer\r\n  const setNextQuestion = (givenAnswer) => {\r\n    qList[currentIndex].givenAnswer = givenAnswer;\r\n    const unsweredQuestion = qList[currentIndex];\r\n    qList.splice(currentIndex, 1, unsweredQuestion);\r\n    setQList(qList);\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  function calculateCompactResult() {\r\n    const totalCount = qList.length;\r\n    const list = Object.values(qList);\r\n    const incorrectAnswers = list.filter((i) => i.givenAnswer !== i.expectedAnswer).length;\r\n    const totalCorrectAnswered = list.filter((i) => i.expectedAnswer == i.givenAnswer).length;\r\n\r\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\r\n      console.log(\"Incorrect result calculation!\");\r\n    }\r\n\r\n    return {\r\n      totalCount: totalCount,\r\n      incorrectAnswers: incorrectAnswers,\r\n      totalCorrectAnswered: totalCorrectAnswered,\r\n    };\r\n  }\r\n\r\n  const calculateDatailedResult = () => {\r\n    console.log(88);\r\n    setTest(\"abcd\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isListCompleted ? (\r\n        <div>\r\n          <h2>Test completed!</h2>\r\n          <AnswerTable\r\n            results={calculateCompactResult()}\r\n            onClick={calculateDatailedResult}\r\n            detailedResults={test}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <CurrentQuestionForm\r\n          onClick={setNextQuestion}\r\n          currentQuestion={qList[currentIndex]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\prj\\questionary\\questionary\\src\\components\\CurrentQuestionForm.jsx",[],"D:\\prj\\questionary\\questionary\\src\\components\\constructor.jsx",[],"D:\\prj\\questionary\\questionary\\src\\components\\Constructor.jsx",[],["36","37"],"D:\\prj\\questionary\\questionary\\src\\components\\AnswerTable.jsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":32,"column":70,"nodeType":"44","messageId":"45","endLine":32,"endColumn":72},{"ruleId":"38","replacedBy":"46"},{"ruleId":"40","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["48"],["49"],"no-global-assign","no-unsafe-negation"]