{"version":3,"sources":["logo.svg","components/CurrentQuestionForm.jsx","components/AnswerTable.jsx","pages/Exam.jsx","components/Constructor.jsx","components/ConfirmDialog.jsx","components/MyToast.jsx","pages/NewQestionnaire.jsx","pages/List.jsx","components/Header.jsx","App.js","index.js"],"names":["CurrentQuestionForm","props","useState","givenAnswer","setGivenAnswer","handleClick","onClick","Card","bg","text","style","justifyContent","height","alignItems","padding","Title","width","currentQuestion","qText","type","value","textAlign","borderRadius","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","Button","variant","className","AnswerTable","qList","open","setOpen","countRight","results","totalCorrectAnswered","totalCount","countWrong","incorrectAnswers","margin","ListGroup","Item","marginTop","marginLeft","marginRight","ProgressBar","fontSize","now","label","ButtonToolbar","disabled","aria-controls","aria-expanded","displayTable","detailedResults","Fade","in","appear","timeout","mountOnEnter","Table","id","striped","hover","size","map","q","index","isCorrect","tickMark","expectedAnswer","Exam","setQList","callBack","hasBeenCalled","setHasBeenCalled","constructor","testDataJsonArray","sort","Math","random","currentIndex","setCurrentIndex","isListCompleted","setDisplayTable","list","Object","values","filter","i","console","log","calculateCompactResult","unsweredQuestion","splice","ConfirmDialog","Modal","show","onHide","onCancel","Header","closeButton","Body","prompt","Footer","onOk","MyToast","Toast","autohide","delay","onClose","NewQestionnaire","defaultInputFields","question","singleField","setSingleField","inputFields","setInputFields","localStorage","listName","setListName","replacementNeedsConfirm","setReplacementNeedsConfirm","confirmDialogPrompt","setConfirmDialogPrompt","displayToast","setDisplayToast","addNewOrReplace","setItem","JSON","stringify","isQuestionAndAnswerFilled","row","handleSubmit","preventDefault","cleanQuestions","getItem","handleInputChange","event","name","Container","minHeight","color","Col","backgroundColor","fontWeight","handleInputNameChange","onSubmit","inputField","placeholder","handleRemoveFields","handleAddFields","List","bordered","renderTooltip","Tooltip","Navbar","expand","sticky","to","Brand","src","logo","alt","Toggle","Collapse","Text","Nav","Link","OverlayTrigger","placement","hide","overlay","Badge","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f03161f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport default function CurrentQuestionForm(props) {\r\n  const [givenAnswer, setGivenAnswer] = useState(\"\");\r\n  const handleClick = () => {\r\n    props.onClick(givenAnswer);\r\n    setGivenAnswer(\"\");\r\n  };\r\n  \r\n  const cardStyle = {\r\n    justifyContent: 'space-between',\r\n    height: '14rem',\r\n    alignItems: \"center\",\r\n    padding: \"2rem\"\r\n  }\r\n\r\n  function handleEnterKey(e) {\r\n    if (e.key === \"Enter\") {\r\n      handleClick();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card bg=\"light\" text=\"dark\" style={cardStyle}>\r\n      <Card.Title style={{ width: \"30rem\" }}>\r\n        {props.currentQuestion.qText}\r\n      </Card.Title>\r\n      <input\r\n        type=\"text\"\r\n        value={givenAnswer}\r\n        style={{ textAlign: \"center\", borderRadius: \"5px\", borderWidth: \"1px\" }}\r\n        onChange={(e) => setGivenAnswer(e.target.value)}\r\n        ref={(ref) => ref && ref.focus()}\r\n        onFocus={(e) =>\r\n          e.currentTarget.setSelectionRange(\r\n            e.currentTarget.value.length,\r\n            e.currentTarget.value.length\r\n          )\r\n        }\r\n        onKeyDown={(e) => handleEnterKey(e)}\r\n      />\r\n      <Button\r\n        variant=\"info\"\r\n        style={{ width: \"8rem\" }}\r\n        className=\"mt-2 mb-2\"\r\n        onClick={handleClick}\r\n      >\r\n        Next &gt;&gt;\r\n      </Button>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport Fade from \"react-bootstrap/Fade\";\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\r\n\r\nexport default function AnswerTable(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const handResultlClick = () => {\r\n    setOpen(!open);\r\n    props.onClick();\r\n  };\r\n\r\n  const renderTable = (qList) => (\r\n    <Fade in={open} appear timeout={600} mountOnEnter>\r\n      <Table disabled\r\n        id=\"fade-tbl\"\r\n        striped\r\n        hover\r\n        size=\"sm\"\r\n        variant=\"light\"\r\n        className=\"mt-3\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Question</th>\r\n            <th>Expected answer</th>\r\n            <th>Your answer</th>\r\n            <th>Correctness</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          \r\n          {qList.map((q, index) => {\r\n            const variant = q.isCorrect ? \"success\" : \"danger\";\r\n            const tickMark = q.isCorrect ? <span>&#10003;</span> : \"\";\r\n            return (\r\n              <tr key={q.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{q.qText}</td>\r\n                <td>{q.expectedAnswer}</td>\r\n                <td>{q.givenAnswer}</td>\r\n                <td>\r\n                  <ListGroup.Item variant={variant}>{tickMark}</ListGroup.Item>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </Fade>\r\n  );\r\n\r\n  function countRight() {\r\n    return (\r\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount\r\n    );\r\n  }\r\n  function countWrong() {\r\n    return (props.results.incorrectAnswers * 100) / props.results.totalCount;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Out of <big>{props.results.totalCount}</big> questions, your result is\r\n      </p>\r\n\r\n      <div\r\n        style={{\r\n          width: 300,\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <ListGroup variant=\"flush\">\r\n          {(() => {\r\n            if (props.results.totalCorrectAnswered > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"success\">\r\n                  Correct answers: <b>{props.results.totalCorrectAnswered}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n\r\n          {(() => {\r\n            if (props.results.incorrectAnswers > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"danger\">\r\n                  Wrong answers: <b>{props.results.incorrectAnswers}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n        </ListGroup>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          width: 600,\r\n          marginTop: \"1.2rem\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n        }}\r\n      >\r\n        <ProgressBar\r\n          style={{ borderRadius: \"2rem\", height: \"1.3rem\", fontSize: \"1.1rem\" }}\r\n        >\r\n          <ProgressBar\r\n            variant=\"success\"\r\n            now={countRight()}\r\n            label={countRight() + \"%\"}\r\n            key={1}\r\n          />\r\n          <ProgressBar\r\n            variant=\"danger\"\r\n            now={countWrong()}\r\n            label={countWrong() + \"%\"}\r\n            key={2}\r\n          />\r\n        </ProgressBar>\r\n      </div>\r\n\r\n      <ButtonToolbar className=\"justify-content-between\">\r\n        <Button variant=\"secondary\" disabled className=\"mt-5\">\r\n          Run test again\r\n        </Button>\r\n        <Button\r\n          variant=\"info\"\r\n          className=\"mt-5\"\r\n          onClick={handResultlClick}\r\n          aria-controls=\"fade-tbl\"\r\n          aria-expanded={open}\r\n        >\r\n          {open ? \"Close\" : \"Open\"} detailed results\r\n        </Button>\r\n      </ButtonToolbar>\r\n\r\n      {props.displayTable && renderTable(props.detailedResults)}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport testDataJsonArray from \"../data/test-data.json\";\r\nimport CurrentQuestionForm from \"../components/CurrentQuestionForm\";\r\nimport AnswerTable from \"../components/AnswerTable\";\r\nimport constructor from \"../components/Constructor\";\r\n\r\nexport default function Exam() {\r\n  const [qList, setQList] = useState(\"\");\r\n\r\n  // shuffl array once at the begining\r\n  constructor(() => {\r\n    const shuffle = (list) => list.sort(() => 0.5 - Math.random());\r\n    setQList(shuffle(testDataJsonArray));\r\n  });\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\r\n  const [displayTable, setDisplayTable] = useState(false);\r\n\r\n  // update current question with an answer\r\n  const setNextQuestion = (givenAnswer) => {\r\n    qList[currentIndex].givenAnswer = givenAnswer;\r\n\r\n    if (qList[currentIndex].expectedAnswer == givenAnswer) {\r\n      qList[currentIndex].isCorrect = true;\r\n    }\r\n    const unsweredQuestion = qList[currentIndex];\r\n    qList.splice(currentIndex, 1, unsweredQuestion);\r\n    setQList(qList);\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  function calculateCompactResult() {\r\n    const totalCount = qList.length;\r\n    const list = Object.values(qList);\r\n    const incorrectAnswers = list.filter((i) => i.isCorrect === false).length;\r\n    const totalCorrectAnswered = list.filter((i) => i.isCorrect === true)\r\n      .length;\r\n\r\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\r\n      console.log(\"Incorrect result calculation!\");\r\n    }\r\n\r\n    return {\r\n      totalCount: totalCount,\r\n      incorrectAnswers: incorrectAnswers,\r\n      totalCorrectAnswered: totalCorrectAnswered,\r\n    };\r\n  }\r\n\r\n  const calculateDatailedResult = () => {\r\n    console.log(88);\r\n    setDisplayTable(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isListCompleted ? (\r\n        <div>\r\n          <h2>Test completed!</h2>\r\n          <AnswerTable\r\n            results={calculateCompactResult()}\r\n            onClick={calculateDatailedResult}\r\n            detailedResults={qList}\r\n            displayTable={displayTable}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <CurrentQuestionForm\r\n          onClick={setNextQuestion}\r\n          currentQuestion={qList[currentIndex]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function Constructor(callBack = () => {}) {\r\n  const [hasBeenCalled, setHasBeenCalled] = useState(false);\r\n  if (hasBeenCalled) return;\r\n  callBack();\r\n  setHasBeenCalled(true);\r\n}\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nfunction  ConfirmDialog(props) {\r\n  return (\r\n    <>\r\n      <Modal show={props.show} onHide={props.onCancel}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.prompt}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={props.onCancel}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={props.onOk}>\r\n            Override\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmDialog;\r\n","import Toast from \"react-bootstrap/Toast\";\r\n\r\nfunction MyToast(props) {\r\n  return (\r\n    <>\r\n      <Toast\r\n        show={props.show}\r\n        autohide={props.autohide}\r\n        delay={props.delay}\r\n        onClose={props.onClose}\r\n      >\r\n        <Toast.Body>\r\n          <span>&#10003;</span>\r\n          <br />\r\n          Successfully saved to the questionnaire list\r\n        </Toast.Body>\r\n      </Toast>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyToast;\r\n","import React, { useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ConfirmDialog from \"../components/ConfirmDialog\";\r\nimport MyToast from \"../components/MyToast\";\r\n\r\nexport default function NewQestionnaire() {\r\n  const defaultInputFields = [{ question: \"\", expectedAnswer: \"\" }];\r\n  //enable/disable Remove button at single input field\r\n  const [singleField, setSingleField] = useState(true);\r\n  //array with all entred questions\r\n  const [inputFields, setInputFields] = useState(defaultInputFields);\r\n  const [listName, setListName] = useState(`List Name #${localStorage.length}`);\r\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\r\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState(\"\");\r\n  const [displayToast, setDisplayToast] = useState(false);\r\n  const handleInputNameChange = (event) => {\r\n    setListName(event.target.value);\r\n  };\r\n\r\n  const handleAddFields = (index) => {\r\n    inputFields.splice(index + 1, 0, { question: \"\", expectedAnswer: \"\" });\r\n    const values = [...inputFields];\r\n    setInputFields(values);\r\n    inputFields.length > 1 && setSingleField(false);\r\n  };\r\n\r\n  const handleRemoveFields = (index) => {\r\n    const values = [...inputFields];\r\n    values.splice(index, 1);\r\n    setInputFields(values);\r\n    if (inputFields.length === 2) {\r\n      setSingleField(true);\r\n    }\r\n  };\r\n\r\n  const addNewOrReplace = (key, value) => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  };\r\n\r\n  const handleReplacementConfirm = () => {\r\n    addNewOrReplace(listName, inputFields);\r\n    setListName(`List Name #${localStorage.length}`);\r\n    setInputFields(defaultInputFields);\r\n    setReplacementNeedsConfirm(false);\r\n  };\r\n\r\n  const handleReplacementCancel = () => {\r\n    setReplacementNeedsConfirm(false);\r\n  };\r\n\r\n  const isQuestionAndAnswerFilled = (row) =>\r\n    row.question !== \"\" && row.expectedAnswer !== \"\";\r\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\r\n  const isInvalidForm = () =>\r\n    !listName ||\r\n    (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //filter out all empty inputs\r\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\r\n    setInputFields(cleanQuestions);\r\n\r\n    //prepare and save to the local storage\r\n    const listExist = localStorage.getItem(listName);\r\n    if (listExist) {\r\n      setConfirmDialogPrompt(\r\n        `Name '${listName}' already exists. Do you want to replace existing ?`\r\n      );\r\n      setReplacementNeedsConfirm(true);\r\n      return;\r\n    }\r\n\r\n    addNewOrReplace(listName, inputFields);\r\n    setListName(`List Name #${localStorage.length}`);\r\n    setInputFields(defaultInputFields);\r\n    setDisplayToast(true);\r\n  };\r\n\r\n  const handleInputChange = (index, event) => {\r\n    const values = [...inputFields];\r\n    if (event.target.name === \"question\") {\r\n      values[index].question = event.target.value;\r\n    } else {\r\n      values[index].expectedAnswer = event.target.value;\r\n    }\r\n    setInputFields(values);\r\n  };\r\n\r\n  return (\r\n    <Container style={{ minHeight: \"100vh\", color: \"white\" }}>\r\n      <h4 className=\"text-center py-3\">Create a qestionnaire here</h4>\r\n      {/* List name */}\r\n      <Col className=\"text-center\">\r\n        <input\r\n          style={{\r\n            backgroundColor: \"lightGrey\",\r\n            borderRadius: \".3rem\",\r\n            width: \"50%\",\r\n            margin: \"30px\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n          id=\"listName\"\r\n          value={listName}\r\n          onChange={(event) => handleInputNameChange(event)}\r\n        />\r\n      </Col>\r\n      <form onSubmit={handleSubmit}>\r\n        {inputFields.map((inputField, index) => (\r\n          <div className=\"form-row\" key={index}>\r\n            {/* Line  number */}\r\n            <div className=\"fc\">{index + 1}</div>\r\n\r\n            {/* Questionn */}\r\n            <div className=\"form-group col-sm-7\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Question\"\r\n                id=\"question\"\r\n                name=\"question\"\r\n                value={inputField.question}\r\n                onChange={(event) => handleInputChange(index, event)}\r\n              />\r\n            </div>\r\n            {/* Answer */}\r\n            <div className=\"form-group col-sm-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Answer\"\r\n                id=\"answer\"\r\n                name=\"answer\"\r\n                value={inputField.expectedAnswer}\r\n                onChange={(event) => handleInputChange(index, event)}\r\n              />\r\n            </div>\r\n            {/* Add / Remove buttons */}\r\n            <div className=\"form-group col-sm-2\">\r\n              <Button\r\n                variant=\"link\"\r\n                disabled={singleField}\r\n                onClick={() => handleRemoveFields(index)}\r\n              >\r\n                Remove\r\n              </Button>\r\n              <Button variant=\"link\" onClick={() => handleAddFields(index)}>\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div>\r\n          <Button\r\n            variant=\"info\"\r\n            type=\"submit\"\r\n            onSubmit={handleSubmit}\r\n            disabled={isInvalidForm()}\r\n          >\r\n            Save list\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <ConfirmDialog\r\n        show={replacementNeedsConfirm}\r\n        prompt={confirmDialogPrompt}\r\n        onOk={handleReplacementConfirm}\r\n        onCancel={handleReplacementCancel}\r\n      />\r\n      <MyToast\r\n        show={displayToast}\r\n        delay={2000}\r\n        autohide={true}\r\n        onClose={() => setDisplayToast(false)}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport default function List() {\r\n  // const [lists, setLists] = useState(localStorage);\r\n\r\n  return (\r\n    <>\r\n      <Container style={{ minHeight: \"100vh\", color: \"white\" }}>\r\n        <h4>The list of saved questionaries </h4>\r\n        <Table bordered hover size=\"sm\" variant=\"light\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>List title</th>\r\n              <th>Question number</th>\r\n              <th>Run</th>\r\n              <th>Edit</th>\r\n              <th>Remove</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/* {for (let [key, value] of Object.entries(localStorage))  {\r\n          console.log(`${key}: ${value}`)\r\n        } }\r\n            {/* <tr key={i.id}> */}\r\n            <tr>\r\n              <td>{1}</td>\r\n              <td>Mark</td>\r\n              <td>Otto</td>\r\n              <td>@mdo</td>\r\n              <td>@mdo</td>\r\n              <td>@mdo</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nconst renderTooltip = (props) => (\r\n  <Tooltip\r\n    id=\"badge-tooltip\"\r\n    {...props}>\r\n    You have {localStorage.length} lists with questions\r\n  </Tooltip>\r\n);\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"info\" expand=\"lg\" className=\"py-0 full-width\" sticky=\"top\">\r\n      <LinkContainer to=\"/questionnaire\">\r\n        <Navbar.Brand className=\"text-white\">\r\n          <img\r\n            src={logo}\r\n            width=\"60\"\r\n            height=\"60\"\r\n            className=\"d-inline-block\"\r\n            alt=\"questionnaire logo\"\r\n          />\r\n          The Qestionnaire\r\n        </Navbar.Brand>\r\n      </LinkContainer>\r\n\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\r\n        <Navbar.Text>\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to=\"/new\">\r\n              <Nav.Link>Create New</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/lists\">\r\n              <Nav.Link>\r\n                <span>\r\n                  Lists\r\n                </span>\r\n                <OverlayTrigger\r\n                  placement=\"bottom\"\r\n                  delay={{ show: 250, hide: 400 }}\r\n                  overlay={renderTooltip}\r\n                >\r\n                  <Badge className=\"counter-badge\" variant=\"warning\">{localStorage.length}</Badge>\r\n                </OverlayTrigger>\r\n              </Nav.Link>\r\n            </LinkContainer>\r\n          </Nav>\r\n        </Navbar.Text>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Exam from './pages/Exam'\r\nimport NewQestionnaire from './pages/NewQestionnaire';\r\nimport List from './pages/List';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Header from './components/Header';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"main-wrapper\">\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/questionnaire\" component={Exam} />\r\n          <Route path=\"/new\" component={NewQestionnaire} />\r\n          <Route path=\"/lists\" component={List} />\r\n        </Switch>\r\n      </Router>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <App/>, document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}