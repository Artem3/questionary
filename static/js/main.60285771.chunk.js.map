{"version":3,"sources":["logo.svg","components/CurrentQuestionForm.jsx","components/AnswerTable.jsx","components/DataProvider.jsx","components/Constructor.jsx","App.js","index.js"],"names":["CurrentQuestionForm","props","useState","givenAnswer","setGivenAnswer","handleClick","onClick","Card","bg","text","style","alignItems","Title","width","currentQuestion","qText","type","value","textAlign","borderRadius","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","Button","variant","className","AnswerTable","qList","open","setOpen","countRight","results","totalCorrectAnswered","totalCount","countWrong","incorrectAnswers","ListGroup","Item","ProgressBar","now","label","aria-controls","aria-expanded","displayTable","detailedResults","Fade","in","appear","timeout","mountOnEnter","Table","id","striped","bordered","hover","size","map","q","index","isCorrect","expectedAnswer","DataProvider","setQList","callBack","hasBeenCalled","setHasBeenCalled","constructor","testDataJsonArray","sort","Math","random","currentIndex","setCurrentIndex","isListCompleted","setDisplayTable","list","Object","values","filter","i","console","log","calculateCompactResult","unsweredQuestion","splice","App","Container","src","logo","alt","ReactDOM","render","document","getElementById"],"mappings":"orBAAe,G,MAAA,IAA0B,kC,qDCI1B,SAASA,EAAoBC,GAAQ,IAAD,EACXC,mBAAS,IADE,mBAC1CC,EAD0C,KAC7BC,EAD6B,KAE3CC,EAAc,WAClBJ,EAAMK,QAAQH,GACdC,EAAe,KASjB,OACE,eAACG,EAAA,EAAD,CAAMC,GAAG,QAAQC,KAAK,OAAOC,MAAO,CAAEC,WAAY,UAAlD,UACE,cAACJ,EAAA,EAAKK,MAAN,CAAYF,MAAO,CAAEG,MAAO,SAA5B,SACGZ,EAAMa,gBAAgBC,QAEzB,uBACEC,KAAK,OACLC,MAAOd,EACPO,MAAO,CAAEQ,UAAW,SAAUC,aAAc,MAAOC,YAAa,OAChEC,SAAU,SAACC,GAAD,OAAOlB,EAAekB,EAAEC,OAAON,QACzCO,IAAK,SAACA,GAAD,OAASA,GAAOA,EAAIC,SACzBC,QAAS,SAACJ,GAAD,OACPA,EAAEK,cAAcC,kBACdN,EAAEK,cAAcV,MAAMY,OACtBP,EAAEK,cAAcV,MAAMY,SAG1BC,UAAW,SAACR,GAAD,OAvBjB,SAAwBA,GACR,UAAVA,EAAES,KACJ1B,IAqBoB2B,CAAeV,MAEnC,cAACW,EAAA,EAAD,CACEC,QAAQ,OACRxB,MAAO,CAAEG,MAAO,QAChBsB,UAAU,YACV7B,QAASD,EAJX,wB,mCC7BS,SAAS+B,EAAYnC,GAAQ,IAOrBoC,EAPoB,EACjBnC,oBAAS,GADQ,mBAClCoC,EADkC,KAC5BC,EAD4B,KA0CzC,SAASC,IACP,OAA6C,IAArCvC,EAAMwC,QAAQC,qBAA8BzC,EAAMwC,QAAQE,WAEpE,SAASC,IACP,OAAyC,IAAjC3C,EAAMwC,QAAQI,iBAA0B5C,EAAMwC,QAAQE,WAGhE,OACE,gCACE,wCACS,8BAAM1C,EAAMwC,QAAQE,aAD7B,gCAIA,eAACG,EAAA,EAAD,CAAWZ,QAAQ,QAAnB,UACI,WACA,GAAIjC,EAAMwC,QAAQC,qBAAuB,EACvC,OACE,eAACI,EAAA,EAAUC,KAAX,CAAgBb,QAAQ,UAAxB,8BACmB,4BAAIjC,EAAMwC,QAAQC,0BAJzC,GAUA,WACA,GAAIzC,EAAMwC,QAAQI,iBAAmB,EACnC,OACE,eAACC,EAAA,EAAUC,KAAX,CAAgBb,QAAQ,SAAxB,4BACiB,4BAAIjC,EAAMwC,QAAQI,sBAJvC,MAWJ,uBACA,eAACG,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAad,QAAQ,UAAUe,IAAKT,IAAcU,MAAOV,IAAe,KAAU,GAClF,cAACQ,EAAA,EAAD,CAAad,QAAQ,SAASe,IAAKL,IAAcM,MAAON,IAAe,KAAU,MAGnF,uBACA,cAACX,EAAA,EAAD,CACEC,QAAQ,OACRC,UAAU,OACV7B,QArFmB,WACvBiC,GAASD,GACTrC,EAAMK,WAoFF6C,gBAAc,WACdC,gBAAed,EALjB,kCAQCrC,EAAMoD,eArFUhB,EAqFkBpC,EAAMqD,gBApF3C,cAACC,EAAA,EAAD,CAAMC,GAAIlB,EAAMmB,QAAM,EAACC,QAAS,IAAKC,cAAY,EAAjD,SACE,eAACC,EAAA,EAAD,CAAOC,GAAG,WAAWC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAK/B,QAAQ,QAA9D,UACE,gCACE,+BACE,mCACA,0CACA,iDACA,6CACA,kDAGJ,gCACGG,EAAM6B,KAAI,SAACC,EAAGC,GACb,IAAMlC,EAAUiC,EAAEE,UAAY,UAAY,SAE1C,OACE,+BACE,6BAAKD,EAAQ,IACb,6BAAKD,EAAEpD,QACP,6BAAKoD,EAAEG,iBACP,6BAAKH,EAAEhE,cACP,6BACE,cAAC2C,EAAA,EAAUC,KAAX,CAAgBb,QAASA,QANpBiC,EAAEN,kBCzBV,SAASU,IAAgB,IAAD,EACXrE,mBAAS,IADE,mBAC9BmC,EAD8B,KACvBmC,EADuB,MCJxB,WAA2C,IAAtBC,EAAqB,uDAAV,aAAU,EACbvE,oBAAS,GADI,mBAChDwE,EADgD,KACjCC,EADiC,KAEnDD,IACJD,IACAE,GAAiB,IDIjBC,EAAY,WAEVJ,EAAiBK,EADcC,MAAK,iBAAM,GAAMC,KAAKC,gBALlB,MAQG9E,mBAAS,GARZ,mBAQ9B+E,EAR8B,KAQhBC,EARgB,KAS/BC,IAAkBF,GAAgB5C,EAAMR,OAAS,GATlB,EAWG3B,oBAAS,GAXZ,mBAW9BmD,EAX8B,KAWhB+B,EAXgB,KAiDrC,OACE,8BACGD,EACC,gCACE,iDACA,cAAC/C,EAAD,CACEK,QA7BV,WACE,IAAME,EAAaN,EAAMR,OACnBwD,EAAOC,OAAOC,OAAOlD,GACrBQ,EAAmBwC,EAAKG,QAAO,SAACC,GAAD,OAAuB,IAAhBA,EAAEpB,aAAqBxC,OAC7Da,EAAuB2C,EAAKG,QAAO,SAACC,GAAD,OAAuB,IAAhBA,EAAEpB,aAC/CxC,OAMH,OAJIgB,EAAmBH,IAAyBC,GAC9C+C,QAAQC,IAAI,iCAGP,CACLhD,WAAYA,EACZE,iBAAkBA,EAClBH,qBAAsBA,GAePkD,GACTtF,QAZsB,WAC9BoF,QAAQC,IAAI,IACZP,GAAgB,IAWR9B,gBAAiBjB,EACjBgB,aAAcA,OAIlB,cAACrD,EAAD,CACEM,QAjDgB,SAACH,GACvBkC,EAAM4C,GAAc9E,YAAcA,EAE9BkC,EAAM4C,GAAcX,gBAAkBnE,IACxCkC,EAAM4C,GAAcZ,WAAY,GAElC,IAAMwB,EAAmBxD,EAAM4C,GAC/B5C,EAAMyD,OAAOb,EAAc,EAAGY,GAC9BrB,EAASnC,GACT6C,EAAgBD,EAAe,IAyCzBnE,gBAAiBuB,EAAM4C,OEnDlBc,MAbf,WACE,OACE,cAACC,EAAA,EAAD,UACE,qBAAK7D,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAACoC,EAAD,IACA,qBAAK0B,IAAKC,EAAM/D,UAAU,WAAWgE,IAAI,iBCPnDC,IAASC,OACP,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.60285771.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport default function CurrentQuestionForm(props) {\r\n  const [givenAnswer, setGivenAnswer] = useState(\"\");\r\n  const handleClick = () => {\r\n    props.onClick(givenAnswer);\r\n    setGivenAnswer(\"\");\r\n  };\r\n\r\n  function handleEnterKey(e) {\r\n    if (e.key === \"Enter\") {\r\n      handleClick();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card bg=\"light\" text=\"dark\" style={{ alignItems: \"center\" }}>\r\n      <Card.Title style={{ width: \"30rem\" }}>\r\n        {props.currentQuestion.qText}\r\n      </Card.Title>\r\n      <input\r\n        type=\"text\"\r\n        value={givenAnswer}\r\n        style={{ textAlign: \"center\", borderRadius: \"5px\", borderWidth: \"1px\" }}\r\n        onChange={(e) => setGivenAnswer(e.target.value)}\r\n        ref={(ref) => ref && ref.focus()}\r\n        onFocus={(e) =>\r\n          e.currentTarget.setSelectionRange(\r\n            e.currentTarget.value.length,\r\n            e.currentTarget.value.length\r\n          )\r\n        }\r\n        onKeyDown={(e) => handleEnterKey(e)}\r\n      />\r\n      <Button\r\n        variant=\"info\"\r\n        style={{ width: \"8rem\" }}\r\n        className=\"mt-2 mb-2\"\r\n        onClick={handleClick}\r\n      >\r\n        Next &gt;&gt;\r\n      </Button>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport Fade from \"react-bootstrap/Fade\";\r\n\r\nexport default function AnswerTable(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const handResultlClick = () => {\r\n    setOpen(!open);\r\n    props.onClick();\r\n  };\r\n\r\n  const renderTable = (qList) => (\r\n    <Fade in={open} appear timeout={600} mountOnEnter>\r\n      <Table id=\"fade-tbl\" striped bordered hover size=\"sm\" variant=\"light\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Question</th>\r\n            <th>Expected answer</th>\r\n            <th>Your answer</th>\r\n            <th>Correctness</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {qList.map((q, index) => {\r\n            const variant = q.isCorrect ? \"success\" : \"danger\";\r\n            // const mark = q.isCorrect ? '&#10004;' : \"\";\r\n            return (\r\n              <tr key={q.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{q.qText}</td>\r\n                <td>{q.expectedAnswer}</td>\r\n                <td>{q.givenAnswer}</td>\r\n                <td>\r\n                  <ListGroup.Item variant={variant}>\r\n                    {/* {mark}  */}\r\n                  </ListGroup.Item>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </Fade>\r\n  );\r\n\r\n  function countRight() {\r\n    return (props.results.totalCorrectAnswered * 100) / props.results.totalCount\r\n  };\r\n  function countWrong() {\r\n    return (props.results.incorrectAnswers * 100) / props.results.totalCount\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Out of <big>{props.results.totalCount}</big> questions, your result is\r\n      </p>\r\n\r\n      <ListGroup variant=\"flush\">\r\n        {(() => {\r\n          if (props.results.totalCorrectAnswered > 0) {\r\n            return (\r\n              <ListGroup.Item variant=\"success\">\r\n                Correct answers: <b>{props.results.totalCorrectAnswered}</b>\r\n              </ListGroup.Item>\r\n            );\r\n          }\r\n        })()}\r\n\r\n        {(() => {\r\n          if (props.results.incorrectAnswers > 0) {\r\n            return (\r\n              <ListGroup.Item variant=\"danger\">\r\n                Wrong answers: <b>{props.results.incorrectAnswers}</b>\r\n              </ListGroup.Item>\r\n            );\r\n          }\r\n        })()}\r\n      </ListGroup>\r\n\r\n      <br />\r\n      <ProgressBar>\r\n        <ProgressBar variant=\"success\" now={countRight()} label={countRight() + '%'} key={1} />\r\n        <ProgressBar variant=\"danger\" now={countWrong()} label={countWrong() + '%'} key={2} />\r\n      </ProgressBar>\r\n\r\n      <br />\r\n      <Button\r\n        variant=\"info\"\r\n        className=\"mb-3\"\r\n        onClick={handResultlClick}\r\n        aria-controls=\"fade-tbl\"\r\n        aria-expanded={open}>\r\n        See detailed results\r\n      </Button>\r\n      {props.displayTable && renderTable(props.detailedResults)}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport testDataJsonArray from \"../data/test-data.json\";\r\nimport CurrentQuestionForm from \"./CurrentQuestionForm\";\r\nimport AnswerTable from \"./AnswerTable\";\r\nimport constructor from \"./Constructor\";\r\n\r\nexport default function DataProvider() {\r\n  const [qList, setQList] = useState(\"\");\r\n\r\n  // shuffl array once at the begining\r\n  constructor(() => {\r\n    const shuffle = (list) => list.sort(() => 0.5 - Math.random());\r\n    setQList(shuffle(testDataJsonArray));\r\n  });\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\r\n  // const [test, setTest] = useState(\"\");\r\n  const [displayTable, setDisplayTable] = useState(false);\r\n\r\n  // update current question with an answer\r\n  const setNextQuestion = (givenAnswer) => {\r\n    qList[currentIndex].givenAnswer = givenAnswer;\r\n\r\n    if (qList[currentIndex].expectedAnswer == givenAnswer) {\r\n      qList[currentIndex].isCorrect = true;\r\n    }\r\n    const unsweredQuestion = qList[currentIndex];\r\n    qList.splice(currentIndex, 1, unsweredQuestion);\r\n    setQList(qList);\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  function calculateCompactResult() {\r\n    const totalCount = qList.length;\r\n    const list = Object.values(qList);\r\n    const incorrectAnswers = list.filter((i) => i.isCorrect === false).length;\r\n    const totalCorrectAnswered = list.filter((i) => i.isCorrect === true)\r\n      .length;\r\n\r\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\r\n      console.log(\"Incorrect result calculation!\");\r\n    }\r\n\r\n    return {\r\n      totalCount: totalCount,\r\n      incorrectAnswers: incorrectAnswers,\r\n      totalCorrectAnswered: totalCorrectAnswered,\r\n    };\r\n  }\r\n\r\n  const calculateDatailedResult = () => {\r\n    console.log(88);\r\n    setDisplayTable(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isListCompleted ? (\r\n        <div>\r\n          <h2>Test completed!</h2>\r\n          <AnswerTable\r\n            results={calculateCompactResult()}\r\n            onClick={calculateDatailedResult}\r\n            detailedResults={qList}\r\n            displayTable={displayTable}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <CurrentQuestionForm\r\n          onClick={setNextQuestion}\r\n          currentQuestion={qList[currentIndex]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function Constructor(callBack = () => {}) {\r\n  const [hasBeenCalled, setHasBeenCalled] = useState(false);\r\n  if (hasBeenCalled) return;\r\n  callBack();\r\n  setHasBeenCalled(true);\r\n}\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport DataProvider from './components/DataProvider'\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <DataProvider />\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </header>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />, document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}