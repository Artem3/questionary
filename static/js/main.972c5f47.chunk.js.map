{"version":3,"sources":["logo.svg","components/CurrentQuestionForm.jsx","components/AnswerTable.jsx","components/DataProvider.jsx","components/Constructor.jsx","App.js","components/About.jsx","components/Header.jsx","index.js","components/NewQestionnaire.jsx"],"names":["CurrentQuestionForm","props","useState","givenAnswer","setGivenAnswer","handleClick","onClick","Card","bg","text","style","alignItems","Title","width","currentQuestion","qText","type","value","textAlign","borderRadius","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","Button","variant","className","AnswerTable","qList","open","setOpen","countRight","results","totalCorrectAnswered","totalCount","countWrong","incorrectAnswers","margin","ListGroup","Item","marginTop","marginLeft","marginRight","ProgressBar","height","fontSize","now","label","ButtonToolbar","disabled","aria-controls","aria-expanded","displayTable","detailedResults","Fade","in","appear","timeout","mountOnEnter","Table","id","striped","hover","size","map","q","index","isCorrect","tickMark","expectedAnswer","DataProvider","setQList","callBack","hasBeenCalled","setHasBeenCalled","constructor","testDataJsonArray","sort","Math","random","currentIndex","setCurrentIndex","isListCompleted","setDisplayTable","list","Object","values","filter","i","console","log","calculateCompactResult","unsweredQuestion","splice","App","src","logo","alt","About","Container","minHeight","color","Header","Navbar","expand","to","Brand","Toggle","Collapse","Text","Nav","Link","ReactDOM","render","exact","path","component","firstName","lastName","inputFields","setInputFields","handleSubmit","preventDefault","handleInputChange","event","name","class","onSubmit","inputField","Fragment","placeholder","handleRemoveFields","handleAddFields","JSON","stringify","document","getElementById"],"mappings":"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","file":"static/js/main.972c5f47.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport default function CurrentQuestionForm(props) {\r\n  const [givenAnswer, setGivenAnswer] = useState(\"\");\r\n  const handleClick = () => {\r\n    props.onClick(givenAnswer);\r\n    setGivenAnswer(\"\");\r\n  };\r\n\r\n  function handleEnterKey(e) {\r\n    if (e.key === \"Enter\") {\r\n      handleClick();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card bg=\"light\" text=\"dark\" style={{ alignItems: \"center\" }}>\r\n      <Card.Title style={{ width: \"30rem\" }}>\r\n        {props.currentQuestion.qText}\r\n      </Card.Title>\r\n      <input\r\n        type=\"text\"\r\n        value={givenAnswer}\r\n        style={{ textAlign: \"center\", borderRadius: \"5px\", borderWidth: \"1px\" }}\r\n        onChange={(e) => setGivenAnswer(e.target.value)}\r\n        ref={(ref) => ref && ref.focus()}\r\n        onFocus={(e) =>\r\n          e.currentTarget.setSelectionRange(\r\n            e.currentTarget.value.length,\r\n            e.currentTarget.value.length\r\n          )\r\n        }\r\n        onKeyDown={(e) => handleEnterKey(e)}\r\n      />\r\n      <Button\r\n        variant=\"info\"\r\n        style={{ width: \"8rem\" }}\r\n        className=\"mt-2 mb-2\"\r\n        onClick={handleClick}\r\n      >\r\n        Next &gt;&gt;\r\n      </Button>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport Fade from \"react-bootstrap/Fade\";\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\r\n\r\nexport default function AnswerTable(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const handResultlClick = () => {\r\n    setOpen(!open);\r\n    props.onClick();\r\n  };\r\n\r\n  const renderTable = (qList) => (\r\n    <Fade in={open} appear timeout={600} mountOnEnter>\r\n      <Table disabled\r\n        id=\"fade-tbl\"\r\n        striped\r\n        hover\r\n        size=\"sm\"\r\n        variant=\"light\"\r\n        className=\"mt-3\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Question</th>\r\n            <th>Expected answer</th>\r\n            <th>Your answer</th>\r\n            <th>Correctness</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {qList.map((q, index) => {\r\n            const variant = q.isCorrect ? \"success\" : \"danger\";\r\n            const tickMark = q.isCorrect ? <span>&#10003;</span> : \"\";\r\n            return (\r\n              <tr key={q.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{q.qText}</td>\r\n                <td>{q.expectedAnswer}</td>\r\n                <td>{q.givenAnswer}</td>\r\n                <td>\r\n                  <ListGroup.Item variant={variant}>{tickMark}</ListGroup.Item>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </Fade>\r\n  );\r\n\r\n  function countRight() {\r\n    return (\r\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount\r\n    );\r\n  }\r\n  function countWrong() {\r\n    return (props.results.incorrectAnswers * 100) / props.results.totalCount;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Out of <big>{props.results.totalCount}</big> questions, your result is\r\n      </p>\r\n\r\n      <div\r\n        style={{\r\n          width: 300,\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <ListGroup variant=\"flush\">\r\n          {(() => {\r\n            if (props.results.totalCorrectAnswered > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"success\">\r\n                  Correct answers: <b>{props.results.totalCorrectAnswered}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n\r\n          {(() => {\r\n            if (props.results.incorrectAnswers > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"danger\">\r\n                  Wrong answers: <b>{props.results.incorrectAnswers}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n        </ListGroup>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          width: 600,\r\n          marginTop: \"1.2rem\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n        }}\r\n      >\r\n        <ProgressBar\r\n          style={{ borderRadius: \"2rem\", height: \"1.3rem\", fontSize: \"1.1rem\" }}\r\n        >\r\n          <ProgressBar\r\n            variant=\"success\"\r\n            now={countRight()}\r\n            label={countRight() + \"%\"}\r\n            key={1}\r\n          />\r\n          <ProgressBar\r\n            variant=\"danger\"\r\n            now={countWrong()}\r\n            label={countWrong() + \"%\"}\r\n            key={2}\r\n          />\r\n        </ProgressBar>\r\n      </div>\r\n\r\n      <ButtonToolbar className=\"justify-content-between\">\r\n        <Button variant=\"secondary\" disabled className=\"mt-5\">\r\n          Run test again\r\n        </Button>\r\n        <Button\r\n          variant=\"info\"\r\n          className=\"mt-5\"\r\n          onClick={handResultlClick}\r\n          aria-controls=\"fade-tbl\"\r\n          aria-expanded={open}\r\n        >\r\n          {open ? \"Close\" : \"Open\"} detailed results\r\n        </Button>\r\n      </ButtonToolbar>\r\n\r\n      {props.displayTable && renderTable(props.detailedResults)}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport testDataJsonArray from \"../data/test-data.json\";\r\nimport CurrentQuestionForm from \"./CurrentQuestionForm\";\r\nimport AnswerTable from \"./AnswerTable\";\r\nimport constructor from \"./Constructor\";\r\n\r\nexport default function DataProvider() {\r\n  const [qList, setQList] = useState(\"\");\r\n\r\n  // shuffl array once at the begining\r\n  constructor(() => {\r\n    const shuffle = (list) => list.sort(() => 0.5 - Math.random());\r\n    setQList(shuffle(testDataJsonArray));\r\n  });\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\r\n  const [displayTable, setDisplayTable] = useState(false);\r\n\r\n  // update current question with an answer\r\n  const setNextQuestion = (givenAnswer) => {\r\n    qList[currentIndex].givenAnswer = givenAnswer;\r\n\r\n    if (qList[currentIndex].expectedAnswer == givenAnswer) {\r\n      qList[currentIndex].isCorrect = true;\r\n    }\r\n    const unsweredQuestion = qList[currentIndex];\r\n    qList.splice(currentIndex, 1, unsweredQuestion);\r\n    setQList(qList);\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  function calculateCompactResult() {\r\n    const totalCount = qList.length;\r\n    const list = Object.values(qList);\r\n    const incorrectAnswers = list.filter((i) => i.isCorrect === false).length;\r\n    const totalCorrectAnswered = list.filter((i) => i.isCorrect === true)\r\n      .length;\r\n\r\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\r\n      console.log(\"Incorrect result calculation!\");\r\n    }\r\n\r\n    return {\r\n      totalCount: totalCount,\r\n      incorrectAnswers: incorrectAnswers,\r\n      totalCorrectAnswered: totalCorrectAnswered,\r\n    };\r\n  }\r\n\r\n  const calculateDatailedResult = () => {\r\n    console.log(88);\r\n    setDisplayTable(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isListCompleted ? (\r\n        <div>\r\n          <h2>Test completed!</h2>\r\n          <AnswerTable\r\n            results={calculateCompactResult()}\r\n            onClick={calculateDatailedResult}\r\n            detailedResults={qList}\r\n            displayTable={displayTable}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <CurrentQuestionForm\r\n          onClick={setNextQuestion}\r\n          currentQuestion={qList[currentIndex]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function Constructor(callBack = () => {}) {\r\n  const [hasBeenCalled, setHasBeenCalled] = useState(false);\r\n  if (hasBeenCalled) return;\r\n  callBack();\r\n  setHasBeenCalled(true);\r\n}\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DataProvider from './components/DataProvider'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n        <body className=\"App-body\">\r\n          <DataProvider />\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </body>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <Container style={{ minHeight: \"100vh\", color: \"white\" }}>\r\n      <h3>About page will be here.</h3>\r\n      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Velit enim quasi\r\n      quo earum, modi necessitatibus repellendus neque possimus. Placeat\r\n      voluptate, alias itaque dicta adipisci laboriosam enim ipsum perferendis\r\n      eos molestias.\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"info\" expand=\"lg\" className=\"py-0\">\r\n      <LinkContainer to=\"/questionnaire\">\r\n        <Navbar.Brand className=\"text-white\">\r\n          <img\r\n            src={logo}\r\n            width=\"60\"\r\n            height=\"60\"\r\n            className=\"d-inline-block\"\r\n            alt=\"questionnaire logo\"\r\n          />\r\n          The Qestionnaire\r\n        </Navbar.Brand>\r\n      </LinkContainer>\r\n\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\r\n        <Navbar.Text>\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to=\"/new\">\r\n              <Nav.Link>Create New</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/about\">\r\n              <Nav.Link>About</Nav.Link>\r\n            </LinkContainer>\r\n          </Nav>\r\n        </Navbar.Text>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport NewQestionnaire from './components/NewQestionnaire';\r\nimport About from './components/About';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Header from './components/Header';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Header />\r\n    <Switch>\r\n      <Route exact path=\"/questionnaire\" component={App} />\r\n      <Route path=\"/new\" component={NewQestionnaire} />\r\n      <Route path=\"/about\" component={About} />\r\n    </Switch>\r\n  </Router>\r\n  , document.getElementById('root')\r\n);\r\n\r\n","import React, { useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function NewQestionnaire() {\r\n  const [inputFields, setInputFields] = useState([\r\n    { firstName: \"\", lastName: \"\" },\r\n  ]);\r\n\r\n  const handleAddFields = (index) => {\r\n    inputFields.splice(index + 1, 0, { firstName: \"\", lastName: \"\" });\r\n    const values = [...inputFields];\r\n    setInputFields(values);\r\n  };\r\n\r\n  const handleRemoveFields = (index) => {\r\n    const values = [...inputFields];\r\n    values.splice(index, 1);\r\n    setInputFields(values);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"inputFields\", inputFields);\r\n  };\r\n\r\n  const handleInputChange = (index, event) => {\r\n    const values = [...inputFields];\r\n    if (event.target.name === \"firstName\") {\r\n      values[index].firstName = event.target.value;\r\n    } else {\r\n      values[index].lastName = event.target.value;\r\n    }\r\n\r\n    setInputFields(values);\r\n  };\r\n\r\n  return (\r\n    <Container style={{ minHeight: \"100vh\", color: \"white\" }}>\r\n      <h4 class=\"text-center py-2\">Create a qestionnaire here</h4>\r\n      <form onSubmit={handleSubmit}>\r\n        {inputFields.map((inputField, index) => (\r\n          <React.Fragment key={index}>\r\n            <div className=\"form-row\">\r\n              {/* Line  number */}\r\n              <div className=\"fc\">{index + 1}</div>\r\n\r\n              {/* Questionn input */}\r\n              <div className=\"form-group col-sm-7\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Question\"\r\n                  id=\"firstName\"\r\n                  name=\"firstName\"\r\n                  value={inputField.firstName}\r\n                  onChange={(event) => handleInputChange(index, event)}\r\n                />\r\n              </div>\r\n              {/* Answer input */}\r\n              <div className=\"form-group col-sm-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Answer\"\r\n                  id=\"lastName\"\r\n                  name=\"lastName\"\r\n                  value={inputField.lastName}\r\n                  onChange={(event) => handleInputChange(index, event)}\r\n                />\r\n              </div>\r\n              {/* Add / Remove buttons */}\r\n              <div className=\"form-group col-sm-2\">\r\n                <Button\r\n                  variant=\"link\"\r\n                  onClick={() => handleRemoveFields(index)}\r\n                >\r\n                  Remove\r\n                </Button>\r\n                <Button variant=\"link\" onClick={() => handleAddFields(index)}>\r\n                  Add\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n        <div>\r\n          <Button variant=\"info\" type=\"submit\" onSubmit={handleSubmit}>\r\n            Save list\r\n          </Button>\r\n        </div>\r\n        <pre>{JSON.stringify(inputFields, null, 2)}</pre>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}