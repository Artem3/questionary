{"version":3,"sources":["logo.svg","components/AnswerTable.jsx","components/CurrentQuestionForm.jsx","pages/Exam.jsx","utils/arrayUtils.js","components/ConfirmDialog.jsx","components/MyToast.jsx","components/Qestionnaire.jsx","pages/NewList.jsx","pages/EditForm.jsx","pages/List.jsx","components/Header.jsx","App.js","utils/defaultLists.jsx","index.js"],"names":["AnswerTable","props","qList","useState","open","setOpen","countRight","results","totalCorrectAnswered","totalCount","countWrong","incorrectAnswers","style","width","margin","ListGroup","variant","Item","marginTop","marginLeft","marginRight","ProgressBar","borderRadius","height","fontSize","now","label","ButtonToolbar","className","Button","disabled","onClick","aria-controls","aria-expanded","displayTable","detailedResults","Fade","in","appear","timeout","mountOnEnter","Table","id","striped","hover","size","map","q","index","isCorrect","tickMark","qText","expectedAnswer","givenAnswer","CurrentQuestionForm","setGivenAnswer","handleClick","Card","bg","text","justifyContent","alignItems","padding","Title","currentQuestion","type","value","textAlign","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","Exam","setQList","currentIndex","setCurrentIndex","setDisplayTable","useEffect","testDataJsonArray","sort","Math","random","isListCompleted","list","Object","values","filter","i","console","log","calculateCompactResult","unsweredQuestion","splice","ConfirmDialog","Modal","show","onHide","onCancel","Header","closeButton","Body","prompt","Footer","onOk","MyToast","Toast","autohide","delay","onClose","Qestionnaire","defaultInputFields","question","inputFields","setInputFields","localStorage","listName","setListName","replacementNeedsConfirm","setReplacementNeedsConfirm","confirmDialogPrompt","setConfirmDialogPrompt","displayToast","setDisplayToast","history","useHistory","addNewOrReplace","setItem","JSON","stringify","isQuestionAndAnswerFilled","row","handleSubmit","preventDefault","cleanQuestions","getItem","push","handleInputChange","event","name","Container","minHeight","color","Col","backgroundColor","fontWeight","handleInputNameChange","onSubmit","inputField","placeholder","handleRemoveFields","updatedInputFields","handleAddFields","NewList","EditForm","useParams","parse","List","fillContentFromStorage","content","setContent","Map","len","title","qLength","set","bordered","Array","from","elem","to","removeItem","renderTooltip","Tooltip","Navbar","expand","sticky","Brand","src","logo","alt","Toggle","Collapse","Text","Nav","Link","OverlayTrigger","placement","hide","overlay","Badge","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"qrBAAe,G,YAAA,IAA0B,kC,uECQ1B,SAASA,EAAYC,GAAQ,IAOrBC,EAPoB,EACjBC,oBAAS,GADQ,mBAClCC,EADkC,KAC5BC,EAD4B,KAgDzC,SAASC,IACP,OACwC,IAArCL,EAAMM,QAAQC,qBAA8BP,EAAMM,QAAQE,WAG/D,SAASC,IACP,OAAyC,IAAjCT,EAAMM,QAAQI,iBAA0BV,EAAMM,QAAQE,WAGhE,OACE,gCACE,wCACS,8BAAMR,EAAMM,QAAQE,aAD7B,gCAIA,qBACEG,MAAO,CACLC,MAAO,IACPC,OAAQ,QAHZ,SAME,eAACC,EAAA,EAAD,CAAWC,QAAQ,QAAnB,UACI,WACA,GAAIf,EAAMM,QAAQC,qBAAuB,EACvC,OACE,eAACO,EAAA,EAAUE,KAAX,CAAgBD,QAAQ,UAAxB,8BACmB,4BAAIf,EAAMM,QAAQC,0BAJzC,GAUA,WACA,GAAIP,EAAMM,QAAQI,iBAAmB,EACnC,OACE,eAACI,EAAA,EAAUE,KAAX,CAAgBD,QAAQ,SAAxB,4BACiB,4BAAIf,EAAMM,QAAQI,sBAJvC,QAYN,qBACEC,MAAO,CACLC,MAAO,IACPK,UAAW,SACXC,WAAY,OACZC,YAAa,QALjB,SAQE,eAACC,EAAA,EAAD,CACET,MAAO,CAAEU,aAAc,OAAQC,OAAQ,SAAUC,SAAU,UAD7D,UAGE,cAACH,EAAA,EAAD,CACEL,QAAQ,UACRS,IAAKnB,IACLoB,MAAOpB,IAAe,KACjB,GAEP,cAACe,EAAA,EAAD,CACEL,QAAQ,SACRS,IAAKf,IACLgB,MAAOhB,IAAe,KACjB,QAKX,eAACiB,EAAA,EAAD,CAAeC,UAAU,0BAAzB,UACE,cAACC,EAAA,EAAD,CAAQb,QAAQ,YAAYc,UAAQ,EAACF,UAAU,OAA/C,4BAGA,eAACC,EAAA,EAAD,CACEb,QAAQ,OACRY,UAAU,OACVG,QA3HiB,WACvB1B,GAASD,GACTH,EAAM8B,WA0HAC,gBAAc,WACdC,gBAAe7B,EALjB,UAOGA,EAAO,QAAU,OAPpB,0BAWDH,EAAMiC,eA9HUhC,EA8HkBD,EAAMkC,gBA7H3C,cAACC,EAAA,EAAD,CAAMC,GAAIjC,EAAMkC,QAAM,EAACC,QAAS,IAAKC,cAAY,EAAjD,SACE,eAACC,EAAA,EAAD,CACEX,UAAQ,EACRY,GAAG,WACHC,SAAO,EACPC,OAAK,EACLC,KAAK,KACL7B,QAAQ,QACRY,UAAU,OAPZ,UASE,gCACE,+BACE,mCACA,0CACA,iDACA,6CACA,kDAGJ,gCACG1B,EAAM4C,KAAI,SAACC,EAAGC,GACb,IAAMhC,EAAU+B,EAAEE,UAAY,UAAY,SACpCC,EAAWH,EAAEE,UAAY,0CAAwB,GACvD,OACE,+BACE,6BAAKD,EAAQ,IACb,6BAAKD,EAAEI,QACP,6BAAKJ,EAAEK,iBACP,6BAAKL,EAAEM,cACP,6BACE,cAACtC,EAAA,EAAUE,KAAX,CAAgBD,QAASA,EAAzB,SAAmCkC,QAN9BH,EAAEL,kB,YCpCV,SAASY,EAAoBrD,GAAQ,IAAD,EACXE,mBAAS,IADE,mBAC1CkD,EAD0C,KAC7BE,EAD6B,KAE3CC,EAAc,WAClBvD,EAAM8B,QAAQsB,GACdE,EAAe,KAgBjB,OACE,eAACE,EAAA,EAAD,CAAMC,GAAG,QAAQC,KAAK,OAAO/C,MAdb,CAChBgD,eAAgB,gBAChBrC,OAAQ,QACRsC,WAAY,SACZC,QAAS,QAUT,UACE,cAACL,EAAA,EAAKM,MAAN,CAAYnD,MAAO,CAAEC,MAAO,SAA5B,SACGZ,EAAM+D,gBAAgBb,QAEzB,uBACEc,KAAK,OACLC,MAAOb,EACPzC,MAAO,CAAEuD,UAAW,SAAU7C,aAAc,MAAO8C,YAAa,OAChEC,SAAU,SAACC,GAAD,OAAOf,EAAee,EAAEC,OAAOL,QACzCM,IAAK,SAACA,GAAD,OAASA,GAAOA,EAAIC,SACzBC,QAAS,SAACJ,GAAD,OACPA,EAAEK,cAAcC,kBACdN,EAAEK,cAAcT,MAAMW,OACtBP,EAAEK,cAAcT,MAAMW,SAG1BC,UAAW,SAACR,GAAD,OAvBjB,SAAwBA,GACR,UAAVA,EAAES,KACJvB,IAqBoBwB,CAAeV,MAEnC,cAACzC,EAAA,EAAD,CACEb,QAAQ,OACRJ,MAAO,CAAEC,MAAO,QAChBe,UAAU,YACVG,QAASyB,EAJX,wBCpCS,SAASyB,IAAQ,IAAD,EACH9E,mBAAS,IADN,mBACtBD,EADsB,KACfgF,EADe,OAEW/E,mBAAS,GAFpB,mBAEtBgF,EAFsB,KAERC,EAFQ,OAGWjF,oBAAS,GAHpB,mBAGtB+B,EAHsB,KAGRmD,EAHQ,KAK7BC,qBAAU,WACRJ,EAAiBK,ECbiBC,MAAK,iBAAM,GAAMC,KAAKC,eDcvD,IACH,IAAMC,IAAkBR,GAAgBjF,EAAM2E,OAAS,GAqCvD,OACE,8BACGc,EACC,gCACE,iDACA,cAAC3F,EAAD,CACEO,QA5BV,WACE,IAAME,EAAaP,EAAM2E,OACnBe,EAAOC,OAAOC,OAAO5F,GACrBS,EAAmBiF,EAAKG,QAAO,SAACC,GAAD,OAAuB,IAAhBA,EAAE/C,aAAqB4B,OAC7DrE,EAAuBoF,EAAKG,QAAO,SAACC,GAAD,OAAuB,IAAhBA,EAAE/C,aAC/C4B,OAMH,OAJIlE,EAAmBH,IAAyBC,GAC9CwF,QAAQC,IAAI,iCAGP,CACLzF,WAAYA,EACZE,iBAAkBA,EAClBH,qBAAsBA,GAcP2F,GACTpE,QAXsB,WAC9BsD,GAAgB,IAWRlD,gBAAiBjC,EACjBgC,aAAcA,OAIlB,cAACoB,EAAD,CACEvB,QAhDgB,SAACsB,GACvBnD,EAAMiF,GAAc9B,YAAcA,EAE9BnD,EAAMiF,GAAc/B,iBAAmBC,IACzCnD,EAAMiF,GAAclC,WAAY,GAElC,IAAMmD,EAAmBlG,EAAMiF,GAC/BjF,EAAMmG,OAAOlB,EAAc,EAAGiB,GAC9BlB,EAAShF,GACTkF,EAAgBD,EAAe,IAwCzBnB,gBAAiB9D,EAAMiF,O,2CE1ClBmB,MArBf,SAAuBrG,GACrB,OACE,mCACE,eAACsG,EAAA,EAAD,CAAOC,KAAMvG,EAAMuG,KAAMC,OAAQxG,EAAMyG,SAAvC,UACE,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACL,EAAA,EAAMxC,MAAP,8BAEF,cAACwC,EAAA,EAAMM,KAAP,UAAa5G,EAAM6G,SACnB,eAACP,EAAA,EAAMQ,OAAP,WACE,cAAClF,EAAA,EAAD,CAAQb,QAAQ,YAAYe,QAAS9B,EAAMyG,SAA3C,oBAGA,cAAC7E,EAAA,EAAD,CAAQb,QAAQ,UAAUe,QAAS9B,EAAM+G,KAAzC,oC,QCKKC,MAnBf,SAAiBhH,GACf,OACE,mCACE,cAACiH,EAAA,EAAD,CACEV,KAAMvG,EAAMuG,KACZW,SAAUlH,EAAMkH,SAChBC,MAAOnH,EAAMmH,MACbC,QAASpH,EAAMoH,QAJjB,SAME,eAACH,EAAA,EAAML,KAAP,WACE,0CACA,uBAFF,uDCFO,SAASS,IACtB,IAAMC,EAAqB,CAAC,CAAEC,SAAU,GAAIpE,eAAgB,KADvB,EAGCjD,mBAASoH,GAHV,mBAG9BE,EAH8B,KAGjBC,EAHiB,OAILvH,mBAAS,eAAD,OACvBwH,aAAa9C,SALO,mBAI9B+C,EAJ8B,KAIpBC,EAJoB,OAOyB1H,oBAAS,GAPlC,mBAO9B2H,EAP8B,KAOLC,EAPK,OAQiB5H,mBAAS,IAR1B,mBAQ9B6H,EAR8B,KAQTC,EARS,OASG9H,oBAAS,GATZ,mBAS9B+H,EAT8B,KAShBC,EATgB,KAWjCC,EAAUC,cAERC,EAAkB,SAACvD,EAAKb,GAC5ByD,aAAaY,QAAQxD,EAAKyD,KAAKC,UAAUvE,KAGrCwE,EAA4B,SAACC,GAAD,MACf,KAAjBA,EAAInB,UAA0C,KAAvBmB,EAAIvF,gBAqCvBwF,EAAe,SAACtE,GACpBA,EAAEuE,iBAEF,IAAIC,EAAiBrB,EAAY1B,OAAO2C,GAKxC,GAJAhB,EAAeoB,GAGGnB,aAAaoB,QAAQnB,GAUrC,OARAK,EAAuB,SAAD,OACXL,EADW,wDAGlBE,IACFQ,EAAgBV,EAAUH,GAC1BW,EAAQY,KAAK,gBAEfjB,GAA2B,GAI7BO,EAAgBV,EAAUH,GAC1BW,EAAQY,KAAK,WAMTC,EAAoB,SAACjG,EAAOkG,GAChC,IAAMpD,EAAM,YAAO2B,GACO,aAAtByB,EAAM3E,OAAO4E,KACfrD,EAAO9C,GAAOwE,SAAW0B,EAAM3E,OAAOL,MAEtC4B,EAAO9C,GAAOI,eAAiB8F,EAAM3E,OAAOL,MAE9CwD,EAAe5B,IAGjB,OACE,eAACsD,EAAA,EAAD,CAAWxI,MAAO,CAAEyI,UAAW,QAASC,MAAO,SAA/C,UACE,oBAAI1H,UAAU,mBAAd,wCAEA,cAAC2H,EAAA,EAAD,CAAK3H,UAAU,cAAf,SACE,uBACEhB,MAAO,CACL4I,gBAAiB,YACjBlI,aAAc,QACdT,MAAO,MACPC,OAAQ,OACRqD,UAAW,SACXsF,WAAY,QAEd/G,GAAG,WACHwB,MAAO0D,EACPvD,SAAU,SAAC6E,GAAD,OAjFY,SAACA,GAC7BrB,EAAYqB,EAAM3E,OAAOL,OAgFEwF,CAAsBR,QAG/C,uBAAMS,SAAUf,EAAhB,UACGnB,EAAY3E,KAAI,SAAC8G,EAAY5G,GAAb,OACf,sBAAKpB,UAAU,WAAf,UAEE,qBAAKA,UAAU,KAAf,SAAqBoB,EAAQ,IAG7B,qBAAKpB,UAAU,sBAAf,SACE,uBACEqC,KAAK,OACLrC,UAAU,eACViI,YAAY,WACZnH,GAAG,WACHyG,KAAK,WACLjF,MAAO0F,EAAWpC,SAClBnD,SAAU,SAAC6E,GAAD,OAAWD,EAAkBjG,EAAOkG,QAIlD,qBAAKtH,UAAU,sBAAf,SACE,uBACEqC,KAAK,OACLrC,UAAU,eACViI,YAAY,SACZnH,GAAG,SACHyG,KAAK,SACLjF,MAAO0F,EAAWxG,eAClBiB,SAAU,SAAC6E,GAAD,OAAWD,EAAkBjG,EAAOkG,QAIlD,sBAAKtH,UAAU,sBAAf,UACE,cAACC,EAAA,EAAD,CACEb,QAAQ,OACRc,SAxHwC,IAAvB2F,EAAY5C,OAyH7B9C,QAAS,kBA7GI,SAACiB,GAC1B,IAAM8C,EAAM,YAAO2B,GACnB3B,EAAOO,OAAOrD,EAAO,GACrB0E,EAAe5B,GA0GYgE,CAAmB9G,IAHpC,oBAOA,cAACnB,EAAA,EAAD,CAAQb,QAAQ,OAAOe,QAAS,kBAvHpB,SAACiB,GACvB,IAAI+G,EAAkB,YAAOtC,GAC7BsC,EAAmB1D,OAAnB,MAAA0D,EAAkB,CAAQ/G,EAAQ,EAAG,GAAnB,OAAyBuE,IAC3CG,EAAeqC,GAoHiCC,CAAgBhH,IAAtD,sBArC2BA,MA2CjC,8BACE,cAACnB,EAAA,EAAD,CACEb,QAAQ,OACRiD,KAAK,SACL0F,SAAUf,EACV9G,UA3IP8F,GACuB,IAAvBH,EAAY5C,SAAiB6D,EAA0BjB,EAAY,IAsI9D,4BAUJ,cAAC,EAAD,CACEjB,KAAMsB,EACNhB,OAAQkB,EACRhB,KA/H2B,WAC/BsB,EAAgBV,EAAUH,GAC1BW,EAAQY,KAAK,WA8HTtC,SAxH0B,WAC9BqB,GAA2B,MAyHzB,cAAC,EAAD,CACEvB,KAAM0B,EACNd,MAAO,IACPD,UAAU,EACVE,QAAS,kBAAMc,GAAgB,SCvLxB,SAAS8B,IAEpB,OACA,cAACb,EAAA,EAAD,CAAWxI,MAAO,CAAEyI,UAAW,QAASC,MAAO,SAA/C,SACE,cAAChC,EAAD,MCCS,SAAS4C,IAAY,IAC5BxH,EAAOyH,cAAPzH,GAD2B,EAEDvC,mBAASuC,GAFR,mBAE1BkF,EAF0B,KAEhBC,EAFgB,KAG3BN,EAAqB,CAAC,CAAEC,SAAU,GAAIpE,eAAgB,KAEtDwC,EAAO+B,aAAaoB,QAAQrG,GALD,EAMKvC,mBAC3B,OAATyF,EAAgB4C,KAAK4B,MAAMxE,GAAQ2B,GAPJ,mBAM1BE,EAN0B,KAMbC,EANa,OAS6BvH,oBAAS,GATtC,mBAS1B2H,EAT0B,KASDC,EATC,OAUqB5H,mBAAS,IAV9B,mBAU1B6H,EAV0B,KAULC,EAVK,OAWO9H,oBAAS,GAXhB,mBAW1B+H,EAX0B,KAWZC,EAXY,KAa7BC,EAAUC,cAGRC,EAAkB,SAACvD,EAAKb,GAC5ByD,aAAaY,QAAQxD,EAAKyD,KAAKC,UAAUvE,KAGrCwE,EAA4B,SAACC,GAAD,MACf,KAAjBA,EAAInB,UAA0C,KAAvBmB,EAAIvF,gBAsCvBwF,EAAe,SAACtE,GACpBA,EAAEuE,iBAEF,IAAIC,EAAiBrB,EAAY1B,OAAO2C,GAKxC,GAJAhB,EAAeoB,GAGGnB,aAAaoB,QAAQnB,GAWrC,OATAK,EAAuB,SAAD,OACXL,EADW,wDAIlBE,IACFQ,EAAgBV,EAAUH,GAC1BW,EAAQY,KAAK,gBAEfjB,GAA2B,GAK7BO,EAAgBV,EAAUH,GAC1BW,EAAQY,KAAK,WAMTC,EAAoB,SAACjG,EAAOkG,GAChC,IAAMpD,EAAM,YAAO2B,GACO,aAAtByB,EAAM3E,OAAO4E,KACfrD,EAAO9C,GAAOwE,SAAW0B,EAAM3E,OAAOL,MAEtC4B,EAAO9C,GAAOI,eAAiB8F,EAAM3E,OAAOL,MAE9CwD,EAAe5B,IAGjB,OACE,mCACE,eAACsD,EAAA,EAAD,CAAWxI,MAAO,CAAEyI,UAAW,QAASC,MAAO,SAA/C,UACE,qBAAI1H,UAAU,mBAAd,6BACmB6F,EAAY5C,OAD/B,iBAMA,cAAC0E,EAAA,EAAD,CAAK3H,UAAU,cAAf,SACE,uBACEhB,MAAO,CACL4I,gBAAiB,YACjBlI,aAAc,QACdT,MAAO,MACPC,OAAQ,OACRqD,UAAW,SACXsF,WAAY,QAEd/G,GAAG,WACHwB,MAAO0D,EACPvD,SAAU,SAAC6E,GAAD,OAzFU,SAACA,GAC7BxG,EAAKwG,EAAM3E,OAAOL,MAClB2D,EAAYqB,EAAM3E,OAAOL,OAuFIwF,CAAsBR,QAG/C,uBAAMS,SAAUf,EAAhB,UAEGnB,EAAY3E,KAAI,SAAC8G,EAAY5G,GAAb,OACf,sBAAKpB,UAAU,WAAf,UAEE,qBAAKA,UAAU,KAAf,SAAqBoB,EAAQ,IAG7B,qBAAKpB,UAAU,sBAAf,SACE,uBACEqC,KAAK,OACLrC,UAAU,eACViI,YAAY,WACZnH,GAAG,WACHyG,KAAK,WACLjF,MAAO0F,EAAWpC,SAClBnD,SAAU,SAAC6E,GAAD,OAAWD,EAAkBjG,EAAOkG,QAIlD,qBAAKtH,UAAU,sBAAf,SACE,uBACEqC,KAAK,OACLrC,UAAU,eACViI,YAAY,SACZnH,GAAG,SACHyG,KAAK,SACLjF,MAAO0F,EAAWxG,eAClBiB,SAAU,SAAC6E,GAAD,OAAWD,EAAkBjG,EAAOkG,QAIlD,sBAAKtH,UAAU,sBAAf,UACE,cAACC,EAAA,EAAD,CACEb,QAAQ,OACRc,SAjIsC,IAAvB2F,EAAY5C,OAkI3B9C,QAAS,kBArHE,SAACiB,GAC1B,IAAM8C,EAAM,YAAO2B,GACnB3B,EAAOO,OAAOrD,EAAO,GACrB0E,EAAe5B,GAkHcgE,CAAmB9G,IAHpC,oBAOA,cAACnB,EAAA,EAAD,CAAQb,QAAQ,OAAOe,QAAS,kBA/HtB,SAACiB,GACvB,IAAI+G,EAAkB,YAAOtC,GAC7BsC,EAAmB1D,OAAnB,MAAA0D,EAAkB,CAAQ/G,EAAQ,EAAG,GAAnB,OAAyBuE,IAC3CG,EAAeqC,GA4HmCC,CAAgBhH,IAAtD,sBArC2BA,MA2CjC,8BACE,cAACnB,EAAA,EAAD,CACEb,QAAQ,OACRiD,KAAK,SACL0F,SAAUf,EACV9G,UApJT8F,GACuB,IAAvBH,EAAY5C,SAAiB6D,EAA0BjB,EAAY,IA+I5D,4BAUJ,cAAC,EAAD,CACEjB,KAAMsB,EACNhB,OAAQkB,EACRhB,KAvIyB,WAI/BsB,EAAgBV,EAAUH,GAC1BW,EAAQY,KAAK,WAmIPtC,SAhIwB,WAC9BqB,GAA2B,MAiIvB,cAAC,EAAD,CACEvB,KAAM0B,EACNd,MAAO,IACPD,UAAU,EACVE,QAAS,kBAAMc,GAAgB,W,YC/L1B,SAASkC,IAAQ,IAAD,EACClK,mBAASmK,KADV,mBACtBC,EADsB,KACbC,EADa,KAG7B,SAASF,IAEP,IADA,IAAMC,EAAU,IAAIE,IACXzE,EAAI,EAAG0E,EAAM/C,aAAa9C,OAAQmB,EAAI0E,IAAO1E,EAAG,CACvD,IAAI2E,EAAQhD,aAAa5C,IAAIiB,GACzB4E,EAAUpC,KAAK4B,MAAMzC,aAAaoB,QAAQ4B,IAAQ9F,OACtD0F,EAAQM,IAAIF,EAAOC,GAErB,OAAOL,EAYT,OACE,mCACE,eAACnB,EAAA,EAAD,CAAWxI,MAAO,CAAEyI,UAAW,QAASC,MAAO,SAA/C,UACE,oBAAI1H,UAAU,mBAAd,8CACA,eAACa,EAAA,EAAD,CAAOqI,UAAQ,EAAClI,OAAK,EAACC,KAAK,KAAK7B,QAAQ,QAAxC,UACE,gCACE,+BACE,mCACA,4CACA,iDACA,qCACA,sCACA,6CAGJ,gCACG+J,MAAMC,KAAKT,GACT/E,OACA1C,KAAI,SAACmI,EAAMjI,GACV,OACE,+BACE,6BAAKA,EAAQ,IACb,6BAAKiI,EAAK,KACV,6BAAKA,EAAK,KACV,6BAEE,cAACpJ,EAAA,EAAD,CAAQb,QAAQ,OAAOe,QAAS,WAlClDkE,QAAQC,IAAI,oBAkCM,sBAIF,6BAEE,cAACrE,EAAA,EAAD,CAAQb,QAAQ,OAAhB,SACE,cAAC,OAAD,CAAMkK,GAAI,IAAMD,EAAK,GAArB,wBAGJ,6BAEE,cAACpJ,EAAA,EAAD,CACEb,QAAQ,OACRe,QAAS,kBA7CT4I,EA6C4BM,EAAK,GA5CrDtD,aAAawD,WAAWR,QACxBH,EAAWF,KAFQ,IAACK,GA2CF,wBAlBK3H,gB,4DCvCrBoI,EAAgB,SAACnL,GAAD,OACpB,eAACoL,EAAA,EAAD,yBAAS3I,GAAG,iBAAoBzC,GAAhC,0BACY0H,aAAa9C,OADzB,6BAiDa8B,EA5CA,WACb,OACE,eAAC2E,EAAA,EAAD,CAAQ5H,GAAG,OAAO6H,OAAO,KAAK3J,UAAU,kBAAkB4J,OAAO,MAAjE,UACE,cAAC,gBAAD,CAAeN,GAAG,iBAAlB,SACE,eAACI,EAAA,EAAOG,MAAR,CAAc7J,UAAU,aAAxB,UACE,qBACE8J,IAAKC,EACL9K,MAAM,KACNU,OAAO,KACPK,UAAU,iBACVgK,IAAI,uBANR,wBAYF,cAACN,EAAA,EAAOO,OAAR,CAAe7J,gBAAc,qBAC7B,cAACsJ,EAAA,EAAOQ,SAAR,CAAiBpJ,GAAG,mBAAmBd,UAAU,sBAAjD,SACE,cAAC0J,EAAA,EAAOS,KAAR,UACE,eAACC,EAAA,EAAD,CAAKpK,UAAU,UAAf,UACE,cAAC,gBAAD,CAAesJ,GAAG,OAAlB,SACE,cAACc,EAAA,EAAIC,KAAL,2BAEF,cAAC,gBAAD,CAAef,GAAG,SAAlB,SACE,eAACc,EAAA,EAAIC,KAAL,WACE,yCACA,cAACC,EAAA,EAAD,CACEC,UAAU,SACV/E,MAAO,CAAEZ,KAAM,IAAK4F,KAAM,KAC1BC,QAASjB,EAHX,SAKE,cAACkB,EAAA,EAAD,CAAO1K,UAAU,gBAAgBZ,QAAQ,UAAzC,SACG2G,aAAa9C,2BCXnB0H,MAvBf,WAME,OACE,sBAAK3K,UAAU,eAAf,eAJuB,GAAvB+F,aAAa9C,SCeb,WACG8C,aAAaY,QA7BH,uHA6BmBC,KAAKC,UA3B1B,CACX,CAAEjB,SAAU,MAAOpE,eAAgB,KACnC,CAAEoE,SAAU,MAAOpE,eAAgB,KACnC,CAAEoE,SAAU,MAAOpE,eAAgB,KACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,OAAQpE,eAAgB,UAkBjCuE,aAAaY,QA7BH,yFA6BmBC,KAAKC,UAhB1B,CACX,CAAEjB,SAAU,MAAOpE,eAAgB,KACnC,CAAEoE,SAAU,MAAOpE,eAAgB,KACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,MAAOpE,eAAgB,MACnC,CAAEoE,SAAU,MAAOpE,eAAgB,OACnC,CAAEoE,SAAU,MAAOpE,eAAgB,OACnC,CAAEoE,SAAU,MAAOpE,eAAgB,OACnC,CAAEoE,SAAU,MAAOpE,eAAgB,OACnC,CAAEoE,SAAU,MAAOpE,eAAgB,OACnC,CAAEoE,SAAU,OAAQpE,eAAgB,aDLlC,eAAC,gBAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoJ,OAAK,EAACC,KAAK,iBAAiBC,UAAWzH,IAC9C,cAAC,IAAD,CAAOwH,KAAK,OAAOC,UAAWzC,IAC9B,cAAC,IAAD,CAAOwC,KAAK,SAASC,UAAWrC,IAChC,cAAC,IAAD,CAAOoC,KAAK,OAAOC,UAAWxC,UAGlC,qBAAKwB,IAAKC,EAAM/J,UAAU,WAAWgK,IAAI,aEzB/Ce,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ae9a4048.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport Fade from 'react-bootstrap/Fade';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\nexport default function AnswerTable(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const handResultlClick = () => {\r\n    setOpen(!open);\r\n    props.onClick();\r\n  };\r\n\r\n  const renderTable = (qList) => (\r\n    <Fade in={open} appear timeout={600} mountOnEnter>\r\n      <Table\r\n        disabled\r\n        id=\"fade-tbl\"\r\n        striped\r\n        hover\r\n        size=\"sm\"\r\n        variant=\"light\"\r\n        className=\"mt-3\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Question</th>\r\n            <th>Expected answer</th>\r\n            <th>Your answer</th>\r\n            <th>Correctness</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {qList.map((q, index) => {\r\n            const variant = q.isCorrect ? 'success' : 'danger';\r\n            const tickMark = q.isCorrect ? <span>&#10003;</span> : '';\r\n            return (\r\n              <tr key={q.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{q.qText}</td>\r\n                <td>{q.expectedAnswer}</td>\r\n                <td>{q.givenAnswer}</td>\r\n                <td>\r\n                  <ListGroup.Item variant={variant}>{tickMark}</ListGroup.Item>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </Fade>\r\n  );\r\n\r\n  function countRight() {\r\n    return (\r\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount\r\n    );\r\n  }\r\n  function countWrong() {\r\n    return (props.results.incorrectAnswers * 100) / props.results.totalCount;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Out of <big>{props.results.totalCount}</big> questions, your result is\r\n      </p>\r\n\r\n      <div\r\n        style={{\r\n          width: 300,\r\n          margin: 'auto',\r\n        }}\r\n      >\r\n        <ListGroup variant=\"flush\">\r\n          {(() => {\r\n            if (props.results.totalCorrectAnswered > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"success\">\r\n                  Correct answers: <b>{props.results.totalCorrectAnswered}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n\r\n          {(() => {\r\n            if (props.results.incorrectAnswers > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"danger\">\r\n                  Wrong answers: <b>{props.results.incorrectAnswers}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n        </ListGroup>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          width: 600,\r\n          marginTop: '1.2rem',\r\n          marginLeft: 'auto',\r\n          marginRight: 'auto',\r\n        }}\r\n      >\r\n        <ProgressBar\r\n          style={{ borderRadius: '2rem', height: '1.3rem', fontSize: '1.1rem' }}\r\n        >\r\n          <ProgressBar\r\n            variant=\"success\"\r\n            now={countRight()}\r\n            label={countRight() + '%'}\r\n            key={1}\r\n          />\r\n          <ProgressBar\r\n            variant=\"danger\"\r\n            now={countWrong()}\r\n            label={countWrong() + '%'}\r\n            key={2}\r\n          />\r\n        </ProgressBar>\r\n      </div>\r\n\r\n      <ButtonToolbar className=\"justify-content-between\">\r\n        <Button variant=\"secondary\" disabled className=\"mt-5\">\r\n          Run test again\r\n        </Button>\r\n        <Button\r\n          variant=\"info\"\r\n          className=\"mt-5\"\r\n          onClick={handResultlClick}\r\n          aria-controls=\"fade-tbl\"\r\n          aria-expanded={open}\r\n        >\r\n          {open ? 'Close' : 'Open'} detailed results\r\n        </Button>\r\n      </ButtonToolbar>\r\n\r\n      {props.displayTable && renderTable(props.detailedResults)}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default function CurrentQuestionForm(props) {\r\n  const [givenAnswer, setGivenAnswer] = useState('');\r\n  const handleClick = () => {\r\n    props.onClick(givenAnswer);\r\n    setGivenAnswer('');\r\n  };\r\n\r\n  const cardStyle = {\r\n    justifyContent: 'space-between',\r\n    height: '14rem',\r\n    alignItems: 'center',\r\n    padding: '2rem',\r\n  };\r\n\r\n  function handleEnterKey(e) {\r\n    if (e.key === 'Enter') {\r\n      handleClick();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card bg=\"light\" text=\"dark\" style={cardStyle}>\r\n      <Card.Title style={{ width: '30rem' }}>\r\n        {props.currentQuestion.qText}\r\n      </Card.Title>\r\n      <input\r\n        type=\"text\"\r\n        value={givenAnswer}\r\n        style={{ textAlign: 'center', borderRadius: '5px', borderWidth: '1px' }}\r\n        onChange={(e) => setGivenAnswer(e.target.value)}\r\n        ref={(ref) => ref && ref.focus()}\r\n        onFocus={(e) =>\r\n          e.currentTarget.setSelectionRange(\r\n            e.currentTarget.value.length,\r\n            e.currentTarget.value.length\r\n          )\r\n        }\r\n        onKeyDown={(e) => handleEnterKey(e)}\r\n      />\r\n      <Button\r\n        variant=\"info\"\r\n        style={{ width: '8rem' }}\r\n        className=\"mt-2 mb-2\"\r\n        onClick={handleClick}\r\n      >\r\n        Next &gt;&gt;\r\n      </Button>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport testDataJsonArray from 'data/test-data.json';\r\n\r\nimport AnswerTable from 'components/AnswerTable';\r\nimport CurrentQuestionForm from 'components/CurrentQuestionForm';\r\nimport { shuffle } from 'utils/arrayUtils';\r\n\r\nexport default function Exam() {\r\n  const [qList, setQList] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [displayTable, setDisplayTable] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setQList(shuffle(testDataJsonArray));\r\n  }, []);\r\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\r\n\r\n  // update current question with an answer\r\n  const setNextQuestion = (givenAnswer) => {\r\n    qList[currentIndex].givenAnswer = givenAnswer;\r\n\r\n    if (qList[currentIndex].expectedAnswer === givenAnswer) {\r\n      qList[currentIndex].isCorrect = true;\r\n    }\r\n    const unsweredQuestion = qList[currentIndex];\r\n    qList.splice(currentIndex, 1, unsweredQuestion);\r\n    setQList(qList);\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  function calculateCompactResult() {\r\n    const totalCount = qList.length;\r\n    const list = Object.values(qList);\r\n    const incorrectAnswers = list.filter((i) => i.isCorrect === false).length;\r\n    const totalCorrectAnswered = list.filter((i) => i.isCorrect === true)\r\n      .length;\r\n\r\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\r\n      console.log('Incorrect result calculation!');\r\n    }\r\n\r\n    return {\r\n      totalCount: totalCount,\r\n      incorrectAnswers: incorrectAnswers,\r\n      totalCorrectAnswered: totalCorrectAnswered,\r\n    };\r\n  }\r\n\r\n  const calculateDatailedResult = () => {\r\n    setDisplayTable(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isListCompleted ? (\r\n        <div>\r\n          <h2>Test completed!</h2>\r\n          <AnswerTable\r\n            results={calculateCompactResult()}\r\n            onClick={calculateDatailedResult}\r\n            detailedResults={qList}\r\n            displayTable={displayTable}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <CurrentQuestionForm\r\n          onClick={setNextQuestion}\r\n          currentQuestion={qList[currentIndex]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export const shuffle = (list) => list.sort(() => 0.5 - Math.random());\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nfunction ConfirmDialog(props) {\r\n  return (\r\n    <>\r\n      <Modal show={props.show} onHide={props.onCancel}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.prompt}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={props.onCancel}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={props.onOk}>\r\n            Yes, override\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConfirmDialog;\r\n","import Toast from 'react-bootstrap/Toast';\r\n\r\nfunction MyToast(props) {\r\n  return (\r\n    <>\r\n      <Toast\r\n        show={props.show}\r\n        autohide={props.autohide}\r\n        delay={props.delay}\r\n        onClose={props.onClose}\r\n      >\r\n        <Toast.Body>\r\n          <span>&#10003;</span>\r\n          <br />\r\n          Successfully saved to the questionnaire list\r\n        </Toast.Body>\r\n      </Toast>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyToast;\r\n","import React, { useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport ConfirmDialog from 'components/ConfirmDialog';\r\nimport MyToast from 'components/MyToast';\r\n\r\nexport default function Qestionnaire() {\r\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\r\n  //array with all entered questions\r\n  const [inputFields, setInputFields] = useState(defaultInputFields);\r\n  const [listName, setListName] = useState(\r\n    `List Name - ${localStorage.length}`\r\n  );\r\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\r\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\r\n  const [displayToast, setDisplayToast] = useState(false);\r\n\r\n  let history = useHistory();\r\n\r\n  const addNewOrReplace = (key, value) => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  };\r\n\r\n  const isQuestionAndAnswerFilled = (row) =>\r\n    row.question !== '' && row.expectedAnswer !== '';\r\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\r\n\r\n  const isInvalidForm = () =>\r\n    !listName ||\r\n    (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\r\n\r\n  const isRemoveDisabled = () => inputFields.length === 1;\r\n\r\n  const handleInputNameChange = (event) => {\r\n    setListName(event.target.value);\r\n  };\r\n\r\n  const handleAddFields = (index) => {\r\n    let updatedInputFields = [...inputFields];\r\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\r\n    setInputFields(updatedInputFields);\r\n  };\r\n\r\n  const handleRemoveFields = (index) => {\r\n    const values = [...inputFields];\r\n    values.splice(index, 1);\r\n    setInputFields(values);\r\n  };\r\n\r\n  const handleReplacementConfirm = () => {\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n    // setListName(`List Name - ${localStorage.length}`);\r\n    // setInputFields(defaultInputFields);\r\n    // setReplacementNeedsConfirm(false);//<-true?!\r\n  };\r\n\r\n  const handleReplacementCancel = () => {\r\n    setReplacementNeedsConfirm(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //filter out all empty inputs\r\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\r\n    setInputFields(cleanQuestions);\r\n\r\n    //prepare and save to the local storage\r\n    const listExist = localStorage.getItem(listName);\r\n    if (listExist) {\r\n      setConfirmDialogPrompt(\r\n        `Name '${listName}' already exists. Do you want to replace existing ?`\r\n      );\r\n      if (replacementNeedsConfirm) {\r\n        addNewOrReplace(listName, inputFields);\r\n        history.push('/lists');\r\n      }\r\n      setReplacementNeedsConfirm(true);\r\n      return;\r\n    }\r\n\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n    // setListName(`List Name - ${localStorage.length}`);\r\n    // setInputFields(defaultInputFields);\r\n    // setDisplayToast(true);\r\n  };\r\n\r\n  const handleInputChange = (index, event) => {\r\n    const values = [...inputFields];\r\n    if (event.target.name === 'question') {\r\n      values[index].question = event.target.value;\r\n    } else {\r\n      values[index].expectedAnswer = event.target.value;\r\n    }\r\n    setInputFields(values);\r\n  };\r\n\r\n  return (\r\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n      <h4 className=\"text-center py-3\">Create a qestionnaire here</h4>\r\n      {/* List name */}\r\n      <Col className=\"text-center\">\r\n        <input\r\n          style={{\r\n            backgroundColor: 'lightGrey',\r\n            borderRadius: '.3rem',\r\n            width: '50%',\r\n            margin: '30px',\r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n          }}\r\n          id=\"listName\"\r\n          value={listName}\r\n          onChange={(event) => handleInputNameChange(event)}\r\n        />\r\n      </Col>\r\n      <form onSubmit={handleSubmit}>\r\n        {inputFields.map((inputField, index) => (\r\n          <div className=\"form-row\" key={index}>\r\n            {/* Line  number */}\r\n            <div className=\"fc\">{index + 1}</div>\r\n\r\n            {/* Questionn */}\r\n            <div className=\"form-group col-sm-7\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Question\"\r\n                id=\"question\"\r\n                name=\"question\"\r\n                value={inputField.question}\r\n                onChange={(event) => handleInputChange(index, event)}\r\n              />\r\n            </div>\r\n            {/* Answer */}\r\n            <div className=\"form-group col-sm-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Answer\"\r\n                id=\"answer\"\r\n                name=\"answer\"\r\n                value={inputField.expectedAnswer}\r\n                onChange={(event) => handleInputChange(index, event)}\r\n              />\r\n            </div>\r\n            {/* Add / Remove buttons */}\r\n            <div className=\"form-group col-sm-2\">\r\n              <Button\r\n                variant=\"link\"\r\n                disabled={isRemoveDisabled()}\r\n                onClick={() => handleRemoveFields(index)}\r\n              >\r\n                Remove\r\n              </Button>\r\n              <Button variant=\"link\" onClick={() => handleAddFields(index)}>\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div>\r\n          <Button\r\n            variant=\"info\"\r\n            type=\"submit\"\r\n            onSubmit={handleSubmit}\r\n            disabled={isInvalidForm()}\r\n          >\r\n            Save list\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <ConfirmDialog\r\n        show={replacementNeedsConfirm}\r\n        prompt={confirmDialogPrompt}\r\n        onOk={handleReplacementConfirm}\r\n        onCancel={handleReplacementCancel}\r\n      />\r\n      <MyToast\r\n        show={displayToast}\r\n        delay={2000}\r\n        autohide={true}\r\n        onClose={() => setDisplayToast(false)}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","import Qestionnaire from 'components/Qestionnaire';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default function NewList() {\r\n  const testArray = [{ question: '', expectedAnswer: '' }]\r\n    return (\r\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n      <Qestionnaire />\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ConfirmDialog from 'components/ConfirmDialog';\r\nimport MyToast from 'components/MyToast';\r\n\r\nexport default function EditForm() {\r\n  let { id } = useParams();\r\n  const [listName, setListName] = useState(id);\r\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\r\n\r\n  const list = localStorage.getItem(id);\r\n  const [inputFields, setInputFields] = useState(\r\n    list !== null ? JSON.parse(list) : defaultInputFields\r\n  );\r\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\r\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\r\n  const [displayToast, setDisplayToast] = useState(false);\r\n\r\n  let history = useHistory();\r\n\r\n  // --------------------------\r\n  const addNewOrReplace = (key, value) => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  };\r\n\r\n  const isQuestionAndAnswerFilled = (row) =>\r\n    row.question !== '' && row.expectedAnswer !== '';\r\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\r\n\r\n  const isInvalidForm = () =>\r\n    !listName ||\r\n    (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\r\n\r\n  const isRemoveDisabled = () => inputFields.length === 1;\r\n\r\n  const handleInputNameChange = (event) => {\r\n    id = event.target.value;\r\n    setListName(event.target.value);\r\n  };\r\n\r\n  const handleAddFields = (index) => {\r\n    let updatedInputFields = [...inputFields];\r\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\r\n    setInputFields(updatedInputFields);\r\n  };\r\n\r\n  const handleRemoveFields = (index) => {\r\n    const values = [...inputFields];\r\n    values.splice(index, 1);\r\n    setInputFields(values);\r\n  };\r\n\r\n  const handleReplacementConfirm = () => {\r\n    // setListName(`List Name - ${localStorage.length}`);\r\n    // setInputFields(defaultInputFields);\r\n    // setReplacementNeedsConfirm(true);\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n  };\r\n\r\n  const handleReplacementCancel = () => {\r\n    setReplacementNeedsConfirm(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //filter out all empty inputs\r\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\r\n    setInputFields(cleanQuestions);\r\n\r\n    //prepare and save to the local storage\r\n    const listExist = localStorage.getItem(listName);\r\n    if (listExist) {\r\n      setConfirmDialogPrompt(\r\n        `Name '${listName}' already exists. Do you want to replace existing ?`\r\n      );\r\n\r\n      if (replacementNeedsConfirm) {\r\n        addNewOrReplace(listName, inputFields);\r\n        history.push('/lists');\r\n      }\r\n      setReplacementNeedsConfirm(true);\r\n      return;\r\n      // history.push('/lists');\r\n    }\r\n\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n    // setListName(`List Name - ${localStorage.length}`);\r\n    // setInputFields(defaultInputFields);\r\n    // setDisplayToast(true);\r\n  };\r\n\r\n  const handleInputChange = (index, event) => {\r\n    const values = [...inputFields];\r\n    if (event.target.name === 'question') {\r\n      values[index].question = event.target.value;\r\n    } else {\r\n      values[index].expectedAnswer = event.target.value;\r\n    }\r\n    setInputFields(values);\r\n  };\r\n  // --------------------------\r\n  return (\r\n    <>\r\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n        <h4 className=\"text-center py-3\">\r\n          Edit this list ({inputFields.length} questions)\r\n        </h4>\r\n\r\n        {/* <h4 className=\"text-center py-3\">Create a qestionnaire here</h4> */}\r\n        {/* List name */}\r\n        <Col className=\"text-center\">\r\n          <input\r\n            style={{\r\n              backgroundColor: 'lightGrey',\r\n              borderRadius: '.3rem',\r\n              width: '50%',\r\n              margin: '30px',\r\n              textAlign: 'center',\r\n              fontWeight: 'bold',\r\n            }}\r\n            id=\"listName\"\r\n            value={listName}\r\n            onChange={(event) => handleInputNameChange(event)}\r\n          />\r\n        </Col>\r\n        <form onSubmit={handleSubmit}>\r\n          {/* Render table with questions and answers rows */}\r\n          {inputFields.map((inputField, index) => (\r\n            <div className=\"form-row\" key={index}>\r\n              {/* Line  number */}\r\n              <div className=\"fc\">{index + 1}</div>\r\n\r\n              {/* Questionn */}\r\n              <div className=\"form-group col-sm-7\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Question\"\r\n                  id=\"question\"\r\n                  name=\"question\"\r\n                  value={inputField.question}\r\n                  onChange={(event) => handleInputChange(index, event)}\r\n                />\r\n              </div>\r\n              {/* Answer */}\r\n              <div className=\"form-group col-sm-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Answer\"\r\n                  id=\"answer\"\r\n                  name=\"answer\"\r\n                  value={inputField.expectedAnswer}\r\n                  onChange={(event) => handleInputChange(index, event)}\r\n                />\r\n              </div>\r\n              {/* Add / Remove buttons */}\r\n              <div className=\"form-group col-sm-2\">\r\n                <Button\r\n                  variant=\"link\"\r\n                  disabled={isRemoveDisabled()}\r\n                  onClick={() => handleRemoveFields(index)}\r\n                >\r\n                  Remove\r\n                </Button>\r\n                <Button variant=\"link\" onClick={() => handleAddFields(index)}>\r\n                  Add\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <div>\r\n            <Button\r\n              variant=\"info\"\r\n              type=\"submit\"\r\n              onSubmit={handleSubmit}\r\n              disabled={isInvalidForm()}\r\n            >\r\n              Save list\r\n            </Button>\r\n          </div>\r\n        </form>\r\n        <ConfirmDialog\r\n          show={replacementNeedsConfirm}\r\n          prompt={confirmDialogPrompt}\r\n          onOk={handleReplacementConfirm}\r\n          onCancel={handleReplacementCancel}\r\n        />\r\n        <MyToast\r\n          show={displayToast}\r\n          delay={2000}\r\n          autohide={true}\r\n          onClose={() => setDisplayToast(false)}\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function List() {\r\n  const [content, setContent] = useState(fillContentFromStorage());\r\n\r\n  function fillContentFromStorage() {\r\n    const content = new Map();\r\n    for (var i = 0, len = localStorage.length; i < len; ++i) {\r\n      let title = localStorage.key(i);\r\n      let qLength = JSON.parse(localStorage.getItem(title)).length;\r\n      content.set(title, qLength);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  const handleRun = () => {\r\n    console.log('Run btn clicked');\r\n  };\r\n\r\n  const handleDelete = (title) => {\r\n    localStorage.removeItem(title);\r\n    setContent(fillContentFromStorage());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n        <h4 className=\"text-center py-3\">The list of saved questionaries </h4>\r\n        <Table bordered hover size=\"sm\" variant=\"light\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>List title</th>\r\n              <th>Question number</th>\r\n              <th>Run</th>\r\n              <th>Edit</th>\r\n              <th>Remove</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Array.from(content)\r\n              .sort()\r\n              .map((elem, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{elem[0]}</td>\r\n                    <td>{elem[1]}</td>\r\n                    <td>\r\n                      {/* --Run button--- */}\r\n                      <Button variant=\"link\" onClick={() => handleRun()}>\r\n                        &#9655;\r\n                      </Button>\r\n                    </td>\r\n                    <td>\r\n                      {/* --Edit button--- */}\r\n                      <Button variant=\"link\">\r\n                        <Link to={'/' + elem[0]}>&#x270E;</Link>\r\n                      </Button>\r\n                    </td>\r\n                    <td>\r\n                      {/* --Delete button--- */}\r\n                      <Button\r\n                        variant=\"link\"\r\n                        onClick={() => handleDelete(elem[0])}\r\n                      >\r\n                        &#x2716;\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport logo from '../logo.svg';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nconst renderTooltip = (props) => (\r\n  <Tooltip id=\"badge-tooltip\" {...props}>\r\n    You have {localStorage.length} lists with questions\r\n  </Tooltip>\r\n);\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"info\" expand=\"lg\" className=\"py-0 full-width\" sticky=\"top\">\r\n      <LinkContainer to=\"/questionnaire\">\r\n        <Navbar.Brand className=\"text-white\">\r\n          <img\r\n            src={logo}\r\n            width=\"60\"\r\n            height=\"60\"\r\n            className=\"d-inline-block\"\r\n            alt=\"questionnaire logo\"\r\n          />\r\n          The Qestionnaire\r\n        </Navbar.Brand>\r\n      </LinkContainer>\r\n\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\r\n        <Navbar.Text>\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to=\"/new\">\r\n              <Nav.Link>Create New</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/lists\">\r\n              <Nav.Link>\r\n                <span>Lists</span>\r\n                <OverlayTrigger\r\n                  placement=\"bottom\"\r\n                  delay={{ show: 250, hide: 400 }}\r\n                  overlay={renderTooltip}\r\n                >\r\n                  <Badge className=\"counter-badge\" variant=\"warning\">\r\n                    {localStorage.length}\r\n                  </Badge>\r\n                </OverlayTrigger>\r\n              </Nav.Link>\r\n            </LinkContainer>\r\n          </Nav>\r\n        </Navbar.Text>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Exam from './pages/Exam';\nimport NewList from './pages/NewList';\nimport EditForm from './pages/EditForm';\nimport List from './pages/List';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport { saveToStorage } from 'utils/defaultLists';\n\nfunction App() {\n  //initialize default questionaries and save them to local storage\n  function intitDefaultLists() {\n    localStorage.length == 0 && saveToStorage();\n  }\n\n  return (\n    <div className=\"main-wrapper\">\n      {intitDefaultLists()}\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/questionnaire\" component={Exam} />\n          <Route path=\"/new\" component={NewList} />\n          <Route path=\"/lists\" component={List} />\n          <Route path=\"/:id\" component={EditForm} />\n        </Switch>\n      </Router>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport const saveToStorage = () => {\r\n  const title1 = 'Квадараты чисел от 1 до 10';\r\n  const title2 = 'Кубы чисел от 1 до 10';\r\n  const set1 = [\r\n    { question: '1^2', expectedAnswer: '1' },\r\n    { question: '2^2', expectedAnswer: '4' },\r\n    { question: '3^2', expectedAnswer: '9' },\r\n    { question: '4^2', expectedAnswer: '16' },\r\n    { question: '5^2', expectedAnswer: '25' },\r\n    { question: '6^2', expectedAnswer: '36' },\r\n    { question: '7^2', expectedAnswer: '49' },\r\n    { question: '8^2', expectedAnswer: '64' },\r\n    { question: '9^2', expectedAnswer: '81' },\r\n    { question: '10^2', expectedAnswer: '100' },\r\n  ];\r\n  const set2 = [\r\n    { question: '1^3', expectedAnswer: '1' },\r\n    { question: '2^3', expectedAnswer: '8' },\r\n    { question: '3^3', expectedAnswer: '27' },\r\n    { question: '4^3', expectedAnswer: '64' },\r\n    { question: '5^3', expectedAnswer: '125' },\r\n    { question: '6^3', expectedAnswer: '216' },\r\n    { question: '7^3', expectedAnswer: '343' },\r\n    { question: '8^3', expectedAnswer: '512' },\r\n    { question: '9^3', expectedAnswer: '729' },\r\n    { question: '10^3', expectedAnswer: '1000' },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {localStorage.setItem(title1, JSON.stringify(set1))}\r\n      {localStorage.setItem(title2, JSON.stringify(set2))}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}