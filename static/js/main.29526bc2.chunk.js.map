{"version":3,"sources":["logo.svg","components/Salute.jsx","hooks/Hooks.jsx","components/AnswerTable.jsx","components/CurrentQuestionForm.jsx","utils/arrayUtils.js","pages/Exam.jsx","components/ConfirmDialog.jsx","components/Questionnaire.jsx","pages/NewList.jsx","pages/EditForm.jsx","firebase.js","utils/shareHelper.js","components/MySpinner.jsx","res/copy.svg","res/stop.svg","pages/List.jsx","components/QuestionnaireReadOnly.jsx","pages/ImportPage.jsx","pages/Home.js","components/Header.jsx","App.js","utils/defaultLists.js","index.js"],"names":["Salute","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","numberOfPieces","recycle","AnswerTable","props","qList","open","setOpen","countRight","valR","results","totalCorrectAnswered","totalCount","Math","round","countWrong","valW","incorrectAnswers","style","margin","ListGroup","variant","Item","marginTop","marginLeft","marginRight","ProgressBar","borderRadius","fontSize","now","label","isSuccess","ButtonToolbar","className","Button","onClick","runAgain","aria-controls","aria-expanded","displayTable","detailedResults","Fade","in","appear","timeout","mountOnEnter","Table","disabled","bordered","id","striped","hover","size","map","q","index","isCorrect","tickMark","question","expectedAnswer","givenAnswer","CurrentQuestionForm","setGivenAnswer","handleClick","listTitle","Card","bg","text","justifyContent","alignItems","padding","Title","currentQuestion","type","value","textAlign","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","animated","currentProgress","currentLabel","totalLength","shuffle","list","forEach","elem","makeValidModel","sort","random","Exam","useParams","setQList","currentIndex","setCurrentIndex","setDisplayTable","progress","setProgress","savedPool","JSON","parse","localStorage","getItem","questions","isListCompleted","Object","values","filter","i","console","log","calculateCompactResult","thisPool","unsweredQuestion","splice","ConfirmDialog","Modal","show","onHide","onCancel","Header","closeButton","Body","prompt","Footer","onOk","Questionnaire","defaultInputFields","inputFields","setInputFields","listName","setListName","replacementNeedsConfirm","setReplacementNeedsConfirm","confirmDialogPrompt","setConfirmDialogPrompt","history","useHistory","addNewOrReplace","clean","isQuestionAndAnswerFilled","poolToSave","setItem","stringify","setSize","row","handleSubmit","preventDefault","cleanQuestions","push","handleInputChange","event","name","Container","minHeight","color","Col","backgroundColor","fontWeight","handleInputNameChange","onSubmit","inputField","placeholder","updatedInputFields","handleRemoveFields","handleAddFields","NewList","EditForm","toStorage","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","userId","poolTitle","listId","targetQuestionnaire","sharedCollection","counterCollection","user","nanoid","getOrCreateUserId","userRepo","firestore","collection","sharedRepo","counterRepo","doSharing","title","pool","a","validateData","saveQuestionnairyToDb","Promise","resolve","reject","fetch","response","json","counter","Number","documents","fields","integerValue","error","updatedIndex","doc","set","catch","err","then","toString","downloadSharedPool","code","resetStateBeforeFetch","getUserAndTitleByCode","getQuestionnaireFromDb","qArray","prepareDataToSave","sharedCode","sharedCollectionUrl","status","Error","stringValue","questionnaireUrl","MySpinner","myStyle","Spinner","as","animation","role","aria-hidden","List","fillContentFromStorage","content","setContent","spinnerForButton","setSpinnerForButton","Map","len","enableSpinner","disableSpinner","Array","from","poolAndCode","to","removeItem","display","Dropdown","Toggle","Menu","navigator","clipboard","writeText","src","copyImg","alt","Divider","placement","delay","alert","stopImg","result","updatedPool","handleShare","QuestionnaireReadOnly","ImportPage","showPool","setShowPool","importedPool","setImportedPool","importedTitle","setImportedTitle","spinner","setSpinner","handleImportClick","inputWithCode","document","getElementById","theCode","input","trim","parseInt","isNaN","isCodeValide","Home","Navbar","expand","sticky","Brand","logo","Collapse","Text","Nav","Link","OverlayTrigger","hide","overlay","Tooltip","Badge","App","exact","path","component","Import","ReactDOM","render"],"mappings":"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","file":"static/js/main.29526bc2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { useWindowSize } from 'hooks/Hooks.jsx';\nimport Confetti from 'react-confetti';\n\nexport default function Salute() {\n  const { width, height } = useWindowSize();\n\n  return (\n    <Confetti\n      width={width}\n      height={height}\n      numberOfPieces={550}\n      recycle={false}\n    />\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport function useWindowSize() {\n\n  // Initialize state with undefined width/height so server and client renders match\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n   return () => window.removeEventListener(\"resize\", handleResize);\n\n  }, []); // Empty array ensures that effect is only run on mount\n  \n  return windowSize;\n}","import React, { useState } from 'react';\n\nimport Salute from 'components/Salute';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Fade from 'react-bootstrap/Fade';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nexport default function AnswerTable(props) {\n  const [open, setOpen] = useState(false);\n  const handResultlClick = () => {\n    setOpen(!open);\n    props.onClick();\n  };\n\n  const renderTable = (qList) => (\n    <Fade in={open} appear timeout={600} mountOnEnter>\n      <Table\n        disabled\n        bordered\n        id=\"fade-tbl\"\n        striped\n        hover\n        size=\"sm\"\n        variant=\"light\"\n        className=\"mt-3\"\n      >\n        <thead className=\"bg-warning\">\n          <tr>\n            <th>#</th>\n            <th>Question</th>\n            <th>Expected answer</th>\n            <th>Your answer</th>\n            <th>Correctness</th>\n          </tr>\n        </thead>\n        <tbody>\n          {qList.map((q, index) => {\n            const variant = q.isCorrect ? 'success' : 'danger';\n            const tickMark = q.isCorrect ? <span>&#10003;</span> : '';\n            return (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>{q.question}</td>\n                <td>{q.expectedAnswer}</td>\n                <td>{q.givenAnswer}</td>\n                <td>\n                  <ListGroup.Item variant={variant}>{tickMark}</ListGroup.Item>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Fade>\n  );\n\n  // Display salut or not\n  const isSuccess = () => {\n    const valR =\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount;\n    return Math.round(valR * 100) / 100 > 99;\n  };\n\n  // Calculate amount of correct answers\n  function countRight() {\n    const valR =\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount;\n    return Math.round(valR * 100) / 100;\n  }\n\n  // Calculate amount of wrong answers\n  function countWrong() {\n    const valW =\n      (props.results.incorrectAnswers * 100) / props.results.totalCount;\n    return Math.round(valW * 100) / 100;\n  }\n\n  return (\n    <div>\n      <p>\n        Out of <big>{props.results.totalCount}</big> questions, your result is\n      </p>\n\n      <div\n        style={{\n          width: 300,\n          margin: 'auto',\n        }}\n      >\n        <ListGroup variant=\"flush\">\n          {(() => {\n            if (props.results.totalCorrectAnswered > 0) {\n              return (\n                <ListGroup.Item variant=\"success\">\n                  Correct answers: <b>{props.results.totalCorrectAnswered}</b>\n                </ListGroup.Item>\n              );\n            }\n          })()}\n\n          {(() => {\n            if (props.results.incorrectAnswers > 0) {\n              return (\n                <ListGroup.Item variant=\"danger\">\n                  Wrong answers: <b>{props.results.incorrectAnswers}</b>\n                </ListGroup.Item>\n              );\n            }\n          })()}\n        </ListGroup>\n      </div>\n\n      <div\n        style={{\n          width: 600,\n          marginTop: '1.2rem',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n        }}\n      >\n        <ProgressBar\n          style={{ borderRadius: '2rem', height: '1.3rem', fontSize: '1.1rem' }}\n        >\n          <ProgressBar\n            variant=\"success\"\n            now={countRight()}\n            label={countRight() + '%'}\n            key={1}\n          />\n          <ProgressBar\n            variant=\"danger\"\n            now={countWrong()}\n            label={countWrong() + '%'}\n            key={2}\n          />\n        </ProgressBar>\n        {isSuccess() && <Salute />}\n      </div>\n\n      <ButtonToolbar className=\"justify-content-between\">\n        {/* Run again button */}\n        <Button variant=\"warning\" className=\"mt-5\" onClick={props.runAgain}>\n          Run again\n        </Button>\n\n        {/* Open table with results button */}\n        <Button\n          variant=\"info\"\n          className=\"mt-5\"\n          onClick={handResultlClick}\n          aria-controls=\"fade-tbl\"\n          aria-expanded={open}\n        >\n          {open ? 'Close' : 'Open'} detailed results\n        </Button>\n      </ButtonToolbar>\n\n      {props.displayTable && renderTable(props.detailedResults)}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nexport default function CurrentQuestionForm(props) {\n  const [givenAnswer, setGivenAnswer] = useState('');\n  const handleClick = () => {\n    props.onClick(givenAnswer);\n    setGivenAnswer('');\n  };\n\n  const cardStyle = {\n    justifyContent: 'space-between',\n    height: '14rem',\n    alignItems: 'center',\n    padding: '2rem',\n  };\n\n  const inputStyle = {\n    textAlign: 'center',\n    borderRadius: '5px',\n    borderWidth: '1px',\n  };\n\n  function handleEnterKey(e) {\n    if (e.key === 'Enter') {\n      handleClick();\n    }\n  }\n\n  return (\n    <>\n      {/* Questionary title */}\n      <h4 className=\"text-center py-3\">{props.listTitle}</h4>\n\n      {/* Display question card */}\n      <Card bg=\"light\" text=\"dark\" style={cardStyle}>\n        <Card.Title style={{ width: '30rem' }}>{props.currentQuestion.question}</Card.Title>\n        <input\n          type=\"text\"\n          value={givenAnswer}\n          style={inputStyle}\n          onChange={(e) => setGivenAnswer(e.target.value)}\n          ref={(ref) => ref && ref.focus()}\n          onFocus={(e) => e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length)}\n          onKeyDown={(e) => handleEnterKey(e)}\n        />\n        {/* Next >> button */}\n        <Button variant=\"info\" style={{ width: '8rem' }} className=\"mt-2 mb-2\" onClick={handleClick}>\n          Next &gt;&gt;\n        </Button>\n      </Card>\n\n      {/* Running progress bar */}\n      <ProgressBar variant=\"warning\" animated now={props.currentProgress} className=\"mt-1\" />\n      <h5 className=\"text-center py-3\">\n        {props.currentLabel}/{props.totalLength}\n      </h5>\n    </>\n  );\n}\n","export const shuffle = (list) => {\n  const model = makeValidModel(list);\n  return model.sort(() => 0.5 - Math.random());\n};\n\nfunction makeValidModel(list) {\n  if (list == null) {\n    return [\n      {\n        question: '',\n        expectedAnswer: '',\n        givenAnswer: '',\n        isCorrect: false,\n      },\n    ];\n  }\n\n  list.forEach((elem) => {\n    elem.givenAnswer = '';\n    elem.isCorrect = false;\n  });\n  return list;\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport AnswerTable from 'components/AnswerTable';\nimport CurrentQuestionForm from 'components/CurrentQuestionForm';\nimport { shuffle } from 'utils/arrayUtils';\n\nexport default function Exam() {\n  const { id } = useParams();\n  const [qList, setQList] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [displayTable, setDisplayTable] = useState(false);\n  const [progress, setProgress] = useState(1);\n\n  useEffect(() => {\n    const savedPool = JSON.parse(localStorage.getItem(id));\n    setQList(shuffle(savedPool.questions));\n  }, [id]);\n\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\n\n  // update current question with an answer\n  const setNextQuestion = (givenAnswer) => {\n    qList[currentIndex].givenAnswer = givenAnswer;\n\n    if (qList[currentIndex].expectedAnswer === givenAnswer) {\n      qList[currentIndex].isCorrect = true;\n    }\n    const unsweredQuestion = qList[currentIndex];\n    qList.splice(currentIndex, 1, unsweredQuestion);\n    setQList(qList);\n    setCurrentIndex(currentIndex + 1);\n    setProgress(calculateProgress());\n  };\n\n  function calculateCompactResult() {\n    const totalCount = qList.length;\n    const list = Object.values(qList);\n    const incorrectAnswers = list.filter((i) => i.isCorrect === false).length;\n    const totalCorrectAnswered = list.filter((i) => i.isCorrect === true).length;\n\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\n      console.log('Incorrect result calculation!');\n    }\n\n    return {\n      totalCount: totalCount,\n      incorrectAnswers: incorrectAnswers,\n      totalCorrectAnswered: totalCorrectAnswered,\n    };\n  }\n\n  const calculateDatailedResult = () => {\n    setDisplayTable(true);\n  };\n\n  const runAgain = () => {\n    setDisplayTable(false);\n    setCurrentIndex(0);\n    const thisPool = JSON.parse(localStorage.getItem(id));\n    setQList(shuffle(thisPool.questions));\n    setProgress(1);\n  };\n\n  function calculateProgress() {\n    return Math.round(((currentIndex + 1) / qList.length) * 100 * 100) / 100;\n  }\n\n  return (\n    <div>\n      {isListCompleted ? (\n        <div>\n          <h3>Test completed!</h3>\n          <AnswerTable\n            results={calculateCompactResult()}\n            onClick={calculateDatailedResult}\n            detailedResults={qList}\n            displayTable={displayTable}\n            runAgain={runAgain}\n          />\n        </div>\n      ) : (\n        <CurrentQuestionForm\n          onClick={setNextQuestion}\n          currentQuestion={qList[currentIndex]}\n          listTitle={id}\n          currentProgress={progress}\n          currentLabel={currentIndex + 1}\n          totalLength={qList.length}\n        />\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nexport default function ConfirmDialog(props) {\n  return (\n    <>\n      <Modal show={props.show} onHide={props.onCancel}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{props.prompt}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={props.onCancel}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={props.onOk}>\n            Yes, override\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport { useHistory } from 'react-router-dom';\n\nimport ConfirmDialog from 'components/ConfirmDialog';\n\nexport default function Questionnaire(props) {\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\n  //array with all entered questions\n  const [inputFields, setInputFields] = useState(defaultInputFields);\n  const [listName, setListName] = useState(`List Name - ${localStorage.length}`);\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\n\n  let history = useHistory();\n\n  // --------------------------\n  const addNewOrReplace = (key, value) => {\n    const clean = value.filter(isQuestionAndAnswerFilled);\n    if (clean.length === 0) {\n      setInputFields(defaultInputFields);\n      setReplacementNeedsConfirm(false);\n      return;\n    }\n    const poolToSave = { questions: clean };\n    localStorage.setItem(key, JSON.stringify(poolToSave));\n    props.setSize(localStorage.length - 1);\n  };\n\n  const isQuestionAndAnswerFilled = (row) => row.question !== '' && row.expectedAnswer !== '';\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\n\n  const isInvalidForm = () => !listName || (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\n\n  const isRemoveDisabled = () => inputFields.length === 1;\n\n  const handleInputNameChange = (event) => {\n    setListName(event.target.value);\n  };\n\n  const handleAddFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleRemoveFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index, 1);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleReplacementConfirm = () => {\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleReplacementCancel = () => {\n    setReplacementNeedsConfirm(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //filter out all empty inputs\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\n    setInputFields(cleanQuestions);\n\n    //prepare and save to the local storage\n    const listExist = localStorage.getItem(listName);\n    if (listExist) {\n      setConfirmDialogPrompt(`Name '${listName}' already exists. Do you want to replace existing ?`);\n\n      if (replacementNeedsConfirm) {\n        addNewOrReplace(listName, inputFields);\n        history.push('/lists');\n      }\n      setReplacementNeedsConfirm(true);\n      return;\n    }\n\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleInputChange = (index, event) => {\n    const values = [...inputFields];\n    if (event.target.name === 'question') {\n      values[index].question = event.target.value;\n    } else {\n      values[index].expectedAnswer = event.target.value;\n    }\n    setInputFields(values);\n  };\n  // --------------------------\n  return (\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\n      <h4 className=\"text-center py-3\">Create new questionnaire here</h4>\n      {/* List name */}\n      <Col className=\"text-center\">\n        <input\n          style={{\n            backgroundColor: 'lightGrey',\n            borderRadius: '.3rem',\n            width: '50%',\n            margin: '30px',\n            textAlign: 'center',\n            fontWeight: 'bold',\n          }}\n          id=\"listName\"\n          value={listName}\n          onChange={(event) => handleInputNameChange(event)}\n        />\n      </Col>\n      <form onSubmit={handleSubmit}>\n        {/* Render table with questions and answers rows */}\n        {inputFields.map((inputField, index) => (\n          <div className=\"form-row\" key={index}>\n            {/* Line number */}\n            <div className=\"fc\">{index + 1}</div>\n\n            {/* Question */}\n            <div className=\"form-group col-sm-7\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Question\"\n                id=\"question\"\n                name=\"question\"\n                value={inputField.question}\n                onChange={(event) => handleInputChange(index, event)}\n              />\n            </div>\n\n            {/* Answer */}\n            <div className=\"form-group col-sm-2\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Answer\"\n                id=\"answer\"\n                name=\"answer\"\n                value={inputField.expectedAnswer}\n                onChange={(event) => handleInputChange(index, event)}\n              />\n            </div>\n\n            {/* Add / Remove buttons */}\n            <div className=\"form-group col-sm-2\">\n              <Button variant=\"link\" disabled={isRemoveDisabled()} onClick={() => handleRemoveFields(index)}>\n                Remove\n              </Button>\n              <Button variant=\"link\" onClick={() => handleAddFields(index)}>\n                Add\n              </Button>\n            </div>\n          </div>\n        ))}\n        <ButtonToolbar className=\"justify-content-around mt-3\">\n          {/* ---Cancel Button--- */}\n          <Button variant=\"warning\" onClick={() => history.push('/lists')}>\n            Cancel\n          </Button>\n          {/* ---Save list button--- */}\n          <Button variant=\"info\" type=\"submit\" onSubmit={handleSubmit} disabled={isInvalidForm()}>\n            Save list\n          </Button>\n        </ButtonToolbar>\n      </form>\n      <ConfirmDialog\n        show={replacementNeedsConfirm}\n        prompt={confirmDialogPrompt}\n        onOk={handleReplacementConfirm}\n        onCancel={handleReplacementCancel}\n      />\n    </Container>\n  );\n}\n","import Questionnaire from 'components/Questionnaire';\nimport Container from 'react-bootstrap/Container';\n\n\nexport default function NewList(props) {\n  \n  return (\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\n      <Questionnaire setSize={props.setSize} />\n    </Container>\n  );\n}\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nimport ConfirmDialog from 'components/ConfirmDialog';\n\n\nexport default function EditForm(props) {\n  let { id } = useParams();\n  const [listName, setListName] = useState(id);\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\n\n  const list = localStorage.getItem(id);\n  const [inputFields, setInputFields] = useState(list !== null ? JSON.parse(list).questions : defaultInputFields);\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\n\n  let history = useHistory();\n\n  const btnStyle = {\n    width: '400px',\n    justifyContent: 'space-between',\n  };\n  // --------------------------\n  const addNewOrReplace = (key, value) => {\n    const clean = value.filter(isQuestionAndAnswerFilled);\n    if (clean.length === 0) {\n      setInputFields(defaultInputFields);\n      setReplacementNeedsConfirm(false);\n      return;\n    }\n    const toStorage = { questions: clean };\n    localStorage.setItem(key, JSON.stringify(toStorage));\n    props.setSize(localStorage.length - 1);\n  };\n\n  const isQuestionAndAnswerFilled = (row) => row.question !== '' && row.expectedAnswer !== '';\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\n\n  const isInvalidForm = () => !listName || (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\n\n  const isRemoveDisabled = () => inputFields.length === 1;\n\n  const handleInputNameChange = (event) => {\n    id = event.target.value;\n    setListName(event.target.value);\n  };\n\n  const handleAddFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleRemoveFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index, 1);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleReplacementConfirm = () => {\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleReplacementCancel = () => {\n    setReplacementNeedsConfirm(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //filter out all empty inputs\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\n    setInputFields(cleanQuestions);\n\n    //prepare and save to the local storage\n    const listExist = localStorage.getItem(listName);\n    if (listExist) {\n      setConfirmDialogPrompt(`Name '${listName}' already exists. Do you want to replace existing ?`);\n\n      if (replacementNeedsConfirm) {\n        addNewOrReplace(listName, inputFields);\n        history.push('/lists');\n      }\n      setReplacementNeedsConfirm(true);\n      return;\n    }\n\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleInputChange = (index, event) => {\n    const values = [...inputFields];\n    if (event.target.name === 'question') {\n      values[index].question = event.target.value;\n    } else {\n      values[index].expectedAnswer = event.target.value;\n    }\n    setInputFields(values);\n  };\n  // --------------------------\n  return (\n    <>\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\n        <h4 className=\"text-center py-3\">Edit this list ({inputFields.length} questions)</h4>\n        {/* List name */}\n        <Col className=\"text-center\">\n          <input\n            style={{\n              backgroundColor: 'lightGrey',\n              borderRadius: '.3rem',\n              width: '50%',\n              margin: '30px',\n              textAlign: 'center',\n              fontWeight: 'bold',\n            }}\n            id=\"listName\"\n            value={listName}\n            onChange={(event) => handleInputNameChange(event)}\n          />\n        </Col>\n        <form onSubmit={handleSubmit}>\n          {/* Render table with questions and answers rows */}\n          {inputFields.map((inputField, index) => (\n            <div className=\"form-row\" key={index}>\n              {/* Line number */}\n              <div className=\"fc\">{index + 1}</div>\n\n              {/* Question */}\n              <div className=\"form-group col-sm-7\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Question\"\n                  id=\"question\"\n                  name=\"question\"\n                  value={inputField.question}\n                  onChange={(event) => handleInputChange(index, event)}\n                />\n              </div>\n\n              {/* Answer */}\n              <div className=\"form-group col-sm-2\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Answer\"\n                  id=\"answer\"\n                  name=\"answer\"\n                  value={inputField.expectedAnswer}\n                  onChange={(event) => handleInputChange(index, event)}\n                />\n              </div>\n\n              {/* Add / Remove buttons */}\n              <div className=\"form-group col-sm-2\">\n                <Button variant=\"link\" disabled={isRemoveDisabled()} onClick={() => handleRemoveFields(index)}>\n                  Remove\n                </Button>\n                <Button variant=\"link\" onClick={() => handleAddFields(index)}>\n                  Add\n                </Button>\n              </div>\n            </div>\n          ))}\n          <ButtonToolbar className=\"justify-content-around mt-3\">\n            <Button variant=\"warning\" onClick={() => history.push('/lists')}>\n              Cancel\n            </Button>\n            <Button variant=\"info\" type=\"submit\" onSubmit={handleSubmit} disabled={isInvalidForm()}>\n              Save list\n            </Button>\n          </ButtonToolbar>\n        </form>\n        <ConfirmDialog\n          show={replacementNeedsConfirm}\n          prompt={confirmDialogPrompt}\n          onOk={handleReplacementConfirm}\n          onCancel={handleReplacementCancel}\n        />\n      </Container>\n    </>\n  );\n}\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_MESSAGING_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\n","import { nanoid } from 'nanoid';\nimport firebase from './../firebase';\n\nlet userId = '';\nlet poolTitle = '';\nlet currentIndex = 0;\nlet listId = 'default';\nlet targetQuestionnaire = '';\n\nconst counterId = 'counterId';\nconst sharedCollection = 'shared';\nconst counterCollection = 'counter';\nconst user = getOrCreateUserId();\n\nconst userRepo = firebase.firestore().collection(user);\nconst sharedRepo = firebase.firestore().collection(sharedCollection);\nconst counterRepo = firebase.firestore().collection(counterCollection);\n\nconst counterUrl = process.env.REACT_APP_BASIC_PATH_TO_DB + counterCollection;\nconst sharedCollectionUrl = process.env.REACT_APP_BASIC_PATH_TO_DB + sharedCollection;\n\n// Export. Share your questionnaire with anybody\nexport const doSharing = async (title, pool) => {\n  if (!validateData(title, pool)) {\n    return;\n  }\n  console.log('-Start sharing--');\n  await saveQuestionnairyToDb(title, pool);\n  await getSharedCounter();\n  await increaseAndSaveSharedCounter();\n  await saveSharedCode();\n  console.log('-Finish sharing--');\n\n  return currentIndex;\n};\n\n// Import. Get shared questionnaire into your local storage\nexport const downloadSharedPool = async (code) => {\n  resetStateBeforeFetch();\n  console.log('-Start downloading by code ' + code);\n  await getUserAndTitleByCode(code);\n  await getQuestionnaireFromDb();\n  console.log('-Finish a pool downloading--');\n\n  return targetQuestionnaire;\n};\n\n//---------export questionnaire flow----------------\nfunction saveQuestionnairyToDb(title, pool) {\n  return new Promise((resolve, reject) => {\n    listId = 'listId:' + nanoid(10);\n    const doc = prepareDataToSave(title, pool);\n    userRepo\n      .doc(listId)\n      .set(doc)\n      .catch((err) => {\n        reject(err);\n      })\n      .then(resolve);\n    console.log('1 Exprt: Questionnairy saved: ', listId);\n  });\n}\n\nfunction getSharedCounter() {\n  return new Promise((resolve, reject) => {\n    (async () => {\n      try {\n        const response = await fetch(counterUrl);\n        const json = await response.json();\n        let counter = Number(json.documents[0].fields.index.integerValue);\n        currentIndex = counter;\n        console.log('2 Exprt: Current conter:', counter);\n        resolve(counter);\n      } catch (err) {\n        console.error('Exprt.Error in getSharedCounter(): ', err);\n        reject(err);\n      }\n    })();\n  });\n}\n\nfunction increaseAndSaveSharedCounter() {\n  return new Promise((resolve, reject) => {\n    const updatedIndex = currentIndex + 1;\n    console.log('3 Exprt: Updated counter: ', updatedIndex);\n    counterRepo\n      .doc(counterId)\n      .set({ index: updatedIndex })\n      .catch((err) => {\n        console.error('Exprt. Error in increaseSharedCounter(): ', err);\n        reject(err);\n      })\n      .then(resolve);\n    console.log('4 Exprt: Updated counter saved OK');\n  });\n}\n\nfunction saveSharedCode() {\n  return new Promise((resolve, reject) => {\n    sharedRepo\n      .doc(currentIndex.toString())\n      .set({ userId: user, listId: listId })\n      .catch((err) => {\n        reject(err);\n      })\n      .then(resolve);\n    console.log('5 Exprt: Shared code saved OK');\n  });\n}\n\n//------import flow--------\nfunction getUserAndTitleByCode(sharedCode) {\n  return new Promise((resolve) => {\n    (async () => {\n      try {\n        const response = await fetch(sharedCollectionUrl + '/' + sharedCode);\n        if (response.status === 404) throw new Error('Shared code is not found in db.');\n        const json = await response.json();\n        userId = json.fields.userId.stringValue;\n        poolTitle = json.fields.listId.stringValue;\n        console.log(`1 Imprt. UserId: ${userId}. Questionneir id: ${poolTitle}`);\n        resolve();\n      } catch (err) {\n        console.log('Error getting userId and listId by code ' + sharedCode);\n        resolve();\n      }\n    })();\n  });\n}\n\nfunction getQuestionnaireFromDb() {\n  if (userId === '' || poolTitle === '') {\n    console.log('Empty user or poolTitle');\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    (async () => {\n      const questionnaireUrl = process.env.REACT_APP_BASIC_PATH_TO_DB + userId + '/' + poolTitle;\n      try {\n        const response = await fetch(questionnaireUrl);\n        if (response.status === 404) throw Error('The questionnaire is not found.');\n        const json = await response.json();\n        targetQuestionnaire = json.fields.doc.stringValue;\n        console.log('2 Imprt. Questionnaire downloaded OK');\n        resolve();\n      } catch (err) {\n        console.error('Error downloading questionnaire.', err);\n        resolve();\n      }\n    })();\n  });\n}\n\n//----------private methods--------------\nfunction validateData(title, pool) {\n  let valid = true;\n  if (user == null) {\n    console.error('Validation error: userId is null');\n    return false;\n  }\n  if (title === '' || pool === '') {\n    console.error('Validation error: title or pool is empty');\n    return false;\n  }\n  return valid;\n}\n\nfunction prepareDataToSave(title, pool) {\n  const qArray = JSON.parse(pool).questions;\n  const strToSave = JSON.stringify({ listTitle: title, questions: qArray });\n  const toDb = { doc: strToSave };\n  return toDb;\n}\n\nfunction getOrCreateUserId() {\n  if (localStorage.getItem('userId') == null) {\n    const userId = 'user:' + nanoid(7);\n    localStorage.setItem('userId', userId);\n    return userId;\n  } else {\n    return localStorage.getItem('userId');\n  }\n}\n\nfunction resetStateBeforeFetch() {\n  userId = '';\n  poolTitle = '';\n  targetQuestionnaire = '';\n}\n","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\n\nexport default function MySpinner(props) {\n  return (\n    <Button variant=\"primary\" disabled className={props.myStyle}>\n      <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n      {props.text}\n    </Button>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/copy.09213c7f.svg\";","export default __webpack_public_path__ + \"static/media/stop.2a88f0f6.svg\";","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Tippy from '@tippyjs/react';\nimport 'tippy.js/dist/tippy.css';\n\nimport { doSharing } from 'utils/shareHelper';\nimport MySpinner from 'components/MySpinner';\n\nimport copyImg from '../res/copy.svg';\nimport stopImg from '../res/stop.svg';\n\n\nexport default function List(props) {\n  const [content, setContent] = useState(fillContentFromStorage());\n  const [spinnerForButton, setSpinnerForButton] = useState('');\n\n  function fillContentFromStorage() {\n    const content = new Map();\n    for (var i = 0, len = localStorage.length; i < len; ++i) {\n      let title = localStorage.key(i);\n      if (title === 'userId') {\n        continue;\n      }\n      const savedPool = JSON.parse(localStorage.getItem(title));\n      content.set(title, savedPool);\n    }\n    return content;\n  }\n\n  const handleDelete = (title) => {\n    localStorage.removeItem(title);\n    setContent(fillContentFromStorage());\n    props.setSize(localStorage.length - 1);\n  };\n\n  const handleShare = (title) => {\n    enableSpinner(title);\n    const pool = localStorage.getItem(title);\n    doSharing(title, pool).then((result) => {\n      const updatedPool = {\n        questions: JSON.parse(pool).questions,\n        sharedCode: result,\n      };\n      localStorage.setItem(title, JSON.stringify(updatedPool));\n      setContent(fillContentFromStorage());\n      disableSpinner();\n    });\n  };\n\n  const handleCopyToClipboard = (code) => {\n    navigator.clipboard.writeText(code);\n  };\n\n  const handleStopSharing = (code) => {\n    //remove record from SharedCode table and from user's pool\n    alert('Not implemented yet' + code);\n  };\n\n  const enableSpinner = (listTitle) => {\n    setSpinnerForButton(listTitle);\n  };\n\n  const disableSpinner = () => {\n    setSpinnerForButton('');\n  };\n\n  return (\n    <>\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\n        <h4 className=\"text-center py-3\">The list of saved questionaries </h4>\n        <Table bordered hover size=\"sm\" variant=\"light\">\n          <thead className=\"bg-warning\">\n            <tr>\n              <th>#</th>\n              <th>Questionnaire title</th>\n              <th>Number of questions</th>\n              <th>Run</th>\n              <th>Edit</th>\n              <th>Remove</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from(content, ([title, poolAndCode]) => ({ title, poolAndCode }))\n              .sort()\n              .map((elem, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>{elem.title}</td>\n                    <td>{elem.poolAndCode.questions.length}</td>\n                    <td>\n                      {/* --Run button--- */}\n                      <Button variant=\"link\">\n                        <Link to={`/${elem.title}/exam`}>&#9655;</Link>\n                      </Button>\n                    </td>\n                    <td>\n                      {/* --Edit button--- */}\n                      <Button variant=\"link\">\n                        <Link to={`/${elem.title}/edit`}>&#x270E;</Link>\n                      </Button>\n                    </td>\n                    <td>\n                      {/* --Delete button--- */}\n                      <Button variant=\"link\" onClick={() => handleDelete(elem.title)}>\n                        &#x2716;\n                      </Button>\n                    </td>\n                    <td>\n                      {/* --Action button--- */}\n                      {elem.poolAndCode.sharedCode ? (\n                        <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n                          {elem.poolAndCode.sharedCode}\n                          <Dropdown>\n                            <Dropdown.Toggle variant=\"outline-info\">&#9881;</Dropdown.Toggle>\n                            <Dropdown.Menu>\n                              {/* ---Copy code--- */}\n                              <Tippy content=\"Copy to buffer\">\n                                <Dropdown.Item onClick={() => handleCopyToClipboard(elem.poolAndCode.sharedCode)}>\n                                  Copy code <img src={copyImg} alt=\"Copy\" />\n                                </Dropdown.Item>\n                              </Tippy>\n                              <Dropdown.Divider />\n                              {/* ---Stop sharing button--- */}\n                              <Tippy\n                                content=\"The pool won't be avaliable for download for other\"\n                                placement=\"top-start\"\n                                delay={[2000, null]}\n                              >\n                                <Dropdown.Item onClick={() => handleStopSharing(elem.poolAndCode.sharedCode)}>\n                                  Stop sharing <img src={stopImg} alt=\"Stop\" />\n                                </Dropdown.Item>\n                              </Tippy>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        </div>\n                      ) : (\n                        <>\n                          {spinnerForButton === elem.title ? (\n                            <MySpinner text=\" Getting code...\" />\n                          ) : (\n                            <Button variant=\"dark\" onClick={() => handleShare(elem.title)}>\n                              Get shared code &#9741;\n                            </Button>\n                          )}\n                        </>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n      </Container>\n    </>\n  );\n}\n","import Table from 'react-bootstrap/Table';\n\nexport default function QuestionnaireReadOnly(props) {\n  return (\n    <Table bordered hover size=\"sm\">\n      <thead>\n        <th>#</th>\n        <th>Question</th>\n        <th>Expected answer</th>\n      </thead>\n      <tbody>\n        <tr>\n          <td>1</td>\n          <td>Mark</td>\n          <td>Otto</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>Jacob</td>\n          <td>Thornton</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport { downloadSharedPool } from 'utils/shareHelper';\nimport QuestionnaireReadOnly from 'components/QuestionnaireReadOnly';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport MySpinner from 'components/MySpinner';\n\nexport default function ImportPage() {\n  const [showPool, setShowPool] = useState(false);\n  const [importedPool, setImportedPool] = useState([]);\n  const [importedTitle, setImportedTitle] = useState('');\n  const [spinner, setSpinner] = useState(false);\n\n  //--- styles ---\n  const cardStyle = {\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '2rem',\n  };\n\n  const inputStyle = {\n    textAlign: 'center',\n    borderRadius: '5px',\n    borderWidth: '1px',\n  };\n\n  const handleImportClick = () => {\n    const inputWithCode = document.getElementById('theCode');\n    const theCode = inputWithCode.value;\n    if (!isCodeValide(inputWithCode)) return;\n    enableSpinner();\n    downloadSharedPool(theCode).then((result) => {\n      console.log('--' + result);\n      if (result !== '') {\n        const pool = JSON.parse(result);\n        const title = pool.listTitle;\n        const qArray = pool.questions;\n        console.log(title);\n        setImportedTitle(title);\n        setImportedPool(qArray);\n        setShowPool(true);\n      } else {\n        alert('Questionneir is not found or removed by owner');\n      }\n      disableSpinner();\n    });\n  };\n\n  function isCodeValide(input) {\n    if (!input.value || input.value.trim().length === 0) {\n      alert('Empty  or invalid code.');\n      return false;\n    }\n    if (parseInt(input.value) === undefined || isNaN(parseInt(input.value))) {\n      alert('Invalid code: ' + input.value);\n      return false;\n    }\n    return true;\n  }\n\n  function handleEnterKey(e) {\n    if (e.key === 'Enter') {\n      handleImportClick();\n    }\n  }\n\n  const enableSpinner = () => {\n    setSpinner(true);\n  };\n\n  const disableSpinner = () => {\n    setSpinner(false);\n  };\n  const handleCancel = () => {\n    setShowPool(false);\n    document.getElementById('theCode').value = '';\n  };\n\n  return (\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\n      <h4 className=\"text-center py-3\">Import share questionneries </h4>\n      <Card bg=\"light\" text=\"dark\" style={cardStyle}>\n        <Card.Title style={{ width: '30rem' }}>Enter a code here:</Card.Title>\n\n        {/* Input field */}\n        <input\n          id=\"theCode\"\n          type=\"number\"\n          placeholder=\"351\"\n          onFocus={(e) => {\n            e.target.placeholder = '';\n          }}\n          style={inputStyle}\n          onKeyDown={(e) => handleEnterKey(e)}\n        />\n\n        {/* Import button */}\n        {spinner ? (\n          <MySpinner myStyle=\"mt-2 mb-2\" text=\" Uploading...\" />\n        ) : (\n          <Button variant=\"warning\" style={{ width: '8rem' }} className=\"mt-2 mb-2\" onClick={handleImportClick}>\n            Import &#8630;\n          </Button>\n        )}\n\n        {/* Imported questionnair */}\n        {showPool && (\n          <>\n            <h3 className=\"text-center mt-2\">\n              <b>{importedTitle}</b>\n            </h3>\n            <ButtonToolbar className=\"justify-content-between\" style={{ width: '100%' }}>\n              {/* Cancel button */}\n              <Button variant=\"danger\" className=\"mt-3 mb-1\" onClick={handleCancel}>\n                Cancel\n              </Button>\n\n              {/* Save locally button */}\n              <Button variant=\"info\" className=\"mt-3 mb-1\">\n                Save locally\n              </Button>\n            </ButtonToolbar>\n\n            {/* Imported table  */}\n            <QuestionnaireReadOnly pool={importedPool} />\n          </>\n        )}\n      </Card>\n    </Container>\n  );\n}\n","import React from 'react';\n\nexport default function Home() {\n  return <h1>Welcome to the questionnaire!!</h1>;\n}\n","import logo from '../logo.svg';\nimport Badge from 'react-bootstrap/Badge';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nexport default function Header(props) {\n  const renderTooltip = (props) => (\n    <Tooltip id=\"badge-tooltip\" {...props}>\n      You have {localStorage.length - 1} lists with questions\n    </Tooltip>\n  );\n\n  return (\n    <Navbar bg=\"info\" expand=\"lg\" className=\"py-0 full-width\" sticky=\"top\">\n      <LinkContainer to=\"/\">\n        {/* logo */}\n        <Navbar.Brand className=\"text-white\">\n          <img src={logo} width=\"60\" height=\"60\" className=\"d-inline-block\" alt=\"questionnaire logo\" />\n          The Questionnaire\n        </Navbar.Brand>\n      </LinkContainer>\n\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n        <Navbar.Text>\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/lists\">\n              <Nav.Link>\n                <span>Lists</span>\n                <OverlayTrigger placement=\"bottom\" delay={{ show: 250, hide: 400 }} overlay={renderTooltip}>\n                  <Badge className=\"counter-badge\" variant=\"warning\">\n                    {props.size}\n                  </Badge>\n                </OverlayTrigger>\n              </Nav.Link>\n            </LinkContainer>\n\n            {/* vertial separator */}\n            <Nav.Link>\n              <li>&#124;</li>\n            </Nav.Link>\n\n            <LinkContainer to=\"/new\">\n              <Nav.Link>Create New</Nav.Link>\n            </LinkContainer>\n\n            {/* vertial separator */}\n            <Nav.Link>\n              <li>&#124;</li>\n            </Nav.Link>\n\n            <LinkContainer to=\"/import\">\n              <Nav.Link>Import</Nav.Link>\n            </LinkContainer>\n          </Nav>\n        </Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Exam from './pages/Exam';\nimport NewList from './pages/NewList';\nimport EditForm from './pages/EditForm';\nimport List from './pages/List';\nimport Import from './pages/ImportPage';\nimport Home from './pages/Home';\nimport Header from './components/Header';\n\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { saveToStorage, generateId } from 'utils/defaultLists';\nimport React, { useState } from 'react';\n\nexport default function App() {\n  // Number of saved lists with questions in local storage\n  const [size, setSize] = useState(localStorage.length - 1); // - 1 is userId\n\n  //initialize default questionaries and save them to local storage\n  function intitDefaultLists() {\n    localStorage.length < 2 && saveToStorage();\n  }\n  //generate user Id if not exist in local storage\n  function generateUserId() {\n    localStorage.getItem('userId') == null && generateId();\n  }\n\n  return (\n    <div className=\"main-wrapper\">\n      {generateUserId()}\n      {intitDefaultLists()}\n      <HashRouter>\n        <Header size={size} />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/new\" component={() => <NewList setSize={setSize} />} />\n          <Route path=\"/lists\" component={() => <List setSize={setSize} />} />\n          <Route path=\"/import\" component={Import} />\n          <Route path=\"/:id/edit\" component={() => <EditForm setSize={setSize} />} />\n          <Route path=\"/:id/exam\" component={Exam} />\n        </Switch>\n      </HashRouter>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n}\n","import { nanoid } from 'nanoid';\n\n// default questionnaires\nexport const saveToStorage = () => {\n  const title1 = 'Квадараты чисел от 1 до 10';\n  const title2 = 'Кубы чисел от 1 до 10';\n\n  const set1 = [\n    { question: '1^2', expectedAnswer: '1' },\n    { question: '2^2', expectedAnswer: '4' },\n    { question: '3^2', expectedAnswer: '9' },\n    { question: '4^2', expectedAnswer: '16' },\n    { question: '5^2', expectedAnswer: '25' },\n    { question: '6^2', expectedAnswer: '36' },\n    { question: '7^2', expectedAnswer: '49' },\n    { question: '8^2', expectedAnswer: '64' },\n    { question: '9^2', expectedAnswer: '81' },\n    { question: '10^2', expectedAnswer: '100' },\n  ];\n\n  const set2 = [\n    { question: '1^3', expectedAnswer: '1' },\n    { question: '2^3', expectedAnswer: '8' },\n    { question: '3^3', expectedAnswer: '27' },\n    { question: '4^3', expectedAnswer: '64' },\n    { question: '5^3', expectedAnswer: '125' },\n    { question: '6^3', expectedAnswer: '216' },\n    { question: '7^3', expectedAnswer: '343' },\n    { question: '8^3', expectedAnswer: '512' },\n    { question: '9^3', expectedAnswer: '729' },\n    { question: '10^3', expectedAnswer: '1000' },\n  ];\n\n  localStorage.setItem(title1, JSON.stringify({ questions: set1 }));\n  localStorage.setItem(title2, JSON.stringify({ questions: set2 }));\n};\n\nexport const generateId = () => {\n  localStorage.setItem('userId', 'user:' + nanoid(7));\n  console.log('New UserId generated');\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}