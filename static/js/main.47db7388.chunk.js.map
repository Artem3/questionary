{"version":3,"sources":["logo.svg","components/AnswerTable.jsx","components/CurrentQuestionForm.jsx","utils/arrayUtils.js","pages/Exam.jsx","components/ConfirmDialog.jsx","components/Qestionnaire.jsx","pages/NewList.jsx","pages/EditForm.jsx","pages/List.jsx","components/Header.jsx","App.js","utils/defaultLists.jsx","index.js"],"names":["AnswerTable","props","qList","useState","open","setOpen","countRight","valR","results","totalCorrectAnswered","totalCount","Math","round","countWrong","valW","incorrectAnswers","style","width","margin","ListGroup","variant","Item","marginTop","marginLeft","marginRight","ProgressBar","borderRadius","height","fontSize","now","label","ButtonToolbar","className","Button","onClick","runAgain","aria-controls","aria-expanded","displayTable","detailedResults","Fade","in","appear","timeout","mountOnEnter","Table","disabled","bordered","id","striped","hover","size","map","q","index","isCorrect","tickMark","question","expectedAnswer","givenAnswer","CurrentQuestionForm","setGivenAnswer","handleClick","listTitle","Card","bg","text","justifyContent","alignItems","padding","Title","currentQuestion","type","value","textAlign","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","animated","currentProgress","shuffle","list","forEach","elem","makeValidModel","sort","random","Exam","useParams","setQList","currentIndex","setCurrentIndex","setDisplayTable","progress","setProgress","useEffect","JSON","parse","localStorage","getItem","isListCompleted","Object","values","filter","i","console","log","calculateCompactResult","unsweredQuestion","splice","ConfirmDialog","Modal","show","onHide","onCancel","Header","closeButton","Body","prompt","Footer","onOk","Qestionnaire","defaultInputFields","inputFields","setInputFields","listName","setListName","replacementNeedsConfirm","setReplacementNeedsConfirm","confirmDialogPrompt","setConfirmDialogPrompt","history","useHistory","addNewOrReplace","clean","isQuestionAndAnswerFilled","setItem","stringify","setSize","row","handleSubmit","preventDefault","cleanQuestions","push","handleInputChange","event","name","Container","minHeight","color","Col","backgroundColor","fontWeight","handleInputNameChange","onSubmit","inputField","placeholder","updatedInputFields","handleRemoveFields","handleAddFields","NewList","EditForm","List","fillContentFromStorage","content","setContent","Map","len","title","qLength","set","Array","from","to","removeItem","Dropdown","Toggle","Menu","href","Divider","Navbar","expand","sticky","Brand","src","logo","alt","Collapse","Text","Nav","Link","OverlayTrigger","placement","delay","hide","overlay","Tooltip","Badge","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47db7388.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport Fade from 'react-bootstrap/Fade';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\nexport default function AnswerTable(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const handResultlClick = () => {\r\n    setOpen(!open);\r\n    props.onClick();\r\n  };\r\n\r\n  const renderTable = (qList) => (\r\n    <Fade in={open} appear timeout={600} mountOnEnter>\r\n      <Table\r\n        disabled\r\n        bordered\r\n        id=\"fade-tbl\"\r\n        striped\r\n        hover\r\n        size=\"sm\"\r\n        variant=\"light\"\r\n        className=\"mt-3\"\r\n      >\r\n        <thead className=\"bg-warning\">\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Question</th>\r\n            <th>Expected answer</th>\r\n            <th>Your answer</th>\r\n            <th>Correctness</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {qList.map((q, index) => {\r\n            const variant = q.isCorrect ? 'success' : 'danger';\r\n            const tickMark = q.isCorrect ? <span>&#10003;</span> : '';\r\n            return (\r\n              <tr key={index}>\r\n                <td>{index + 1}</td>\r\n                <td>{q.question}</td>\r\n                <td>{q.expectedAnswer}</td>\r\n                <td>{q.givenAnswer}</td>\r\n                <td>\r\n                  <ListGroup.Item variant={variant}>{tickMark}</ListGroup.Item>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </Fade>\r\n  );\r\n\r\n  function countRight() {\r\n    const valR =\r\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount;\r\n    return Math.round(valR * 100) / 100;\r\n  }\r\n\r\n  function countWrong() {\r\n    const valW =\r\n      (props.results.incorrectAnswers * 100) / props.results.totalCount;\r\n    return Math.round(valW * 100) / 100;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Out of <big>{props.results.totalCount}</big> questions, your result is\r\n      </p>\r\n\r\n      <div\r\n        style={{\r\n          width: 300,\r\n          margin: 'auto',\r\n        }}\r\n      >\r\n        <ListGroup variant=\"flush\">\r\n          {(() => {\r\n            if (props.results.totalCorrectAnswered > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"success\">\r\n                  Correct answers: <b>{props.results.totalCorrectAnswered}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n\r\n          {(() => {\r\n            if (props.results.incorrectAnswers > 0) {\r\n              return (\r\n                <ListGroup.Item variant=\"danger\">\r\n                  Wrong answers: <b>{props.results.incorrectAnswers}</b>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })()}\r\n        </ListGroup>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          width: 600,\r\n          marginTop: '1.2rem',\r\n          marginLeft: 'auto',\r\n          marginRight: 'auto',\r\n        }}\r\n      >\r\n        <ProgressBar\r\n          style={{ borderRadius: '2rem', height: '1.3rem', fontSize: '1.1rem' }}\r\n        >\r\n          <ProgressBar\r\n            variant=\"success\"\r\n            now={countRight()}\r\n            label={countRight() + '%'}\r\n            key={1}\r\n          />\r\n          <ProgressBar\r\n            variant=\"danger\"\r\n            now={countWrong()}\r\n            label={countWrong() + '%'}\r\n            key={2}\r\n          />\r\n        </ProgressBar>\r\n      </div>\r\n\r\n      <ButtonToolbar className=\"justify-content-between\">\r\n        {/* Run again button */}\r\n        <Button variant=\"warning\" className=\"mt-5\" onClick={props.runAgain}>\r\n          Run again\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"info\"\r\n          className=\"mt-5\"\r\n          onClick={handResultlClick}\r\n          aria-controls=\"fade-tbl\"\r\n          aria-expanded={open}\r\n        >\r\n          {open ? 'Close' : 'Open'} detailed results\r\n        </Button>\r\n      </ButtonToolbar>\r\n\r\n      {props.displayTable && renderTable(props.detailedResults)}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\nexport default function CurrentQuestionForm(props) {\r\n  const [givenAnswer, setGivenAnswer] = useState('');\r\n  const handleClick = () => {\r\n    props.onClick(givenAnswer);\r\n    setGivenAnswer('');\r\n  };\r\n\r\n  const cardStyle = {\r\n    justifyContent: 'space-between',\r\n    height: '14rem',\r\n    alignItems: 'center',\r\n    padding: '2rem',\r\n  };\r\n\r\n  const inputStyle = {\r\n    textAlign: 'center',\r\n    borderRadius: '5px',\r\n    borderWidth: '1px',\r\n  };\r\n\r\n  function handleEnterKey(e) {\r\n    if (e.key === 'Enter') {\r\n      handleClick();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Questionary title */}\r\n      <h4 className=\"text-center py-3\">{props.listTitle}</h4>\r\n\r\n      {/* Display question card */}\r\n      <Card bg=\"light\" text=\"dark\" style={cardStyle}>\r\n        <Card.Title style={{ width: '30rem' }}>\r\n          {props.currentQuestion.question}\r\n        </Card.Title>\r\n        <input\r\n          type=\"text\"\r\n          value={givenAnswer}\r\n          style={inputStyle}\r\n          onChange={(e) => setGivenAnswer(e.target.value)}\r\n          ref={(ref) => ref && ref.focus()}\r\n          onFocus={(e) =>\r\n            e.currentTarget.setSelectionRange(\r\n              e.currentTarget.value.length,\r\n              e.currentTarget.value.length\r\n            )\r\n          }\r\n          onKeyDown={(e) => handleEnterKey(e)}\r\n        />\r\n        {/* Next >> button */}\r\n        <Button\r\n          variant=\"info\"\r\n          style={{ width: '8rem' }}\r\n          className=\"mt-2 mb-2\"\r\n          onClick={handleClick}\r\n        >\r\n          Next &gt;&gt;\r\n        </Button>\r\n      </Card>\r\n      <ProgressBar variant=\"warning\" animated now={props.currentProgress} />\r\n    </>\r\n  );\r\n}\r\n","export const shuffle = (list) => {\n  const model = makeValidModel(list);\n  return model.sort(() => 0.5 - Math.random());\n};\n\nfunction makeValidModel(list) {\n  if (list == null) {\n    return [\n      {\n        question: '',\n        expectedAnswer: '',\n        givenAnswer: '',\n        isCorrect: false,\n      },\n    ];\n  }\n\n  list.forEach((elem) => {\n    elem.givenAnswer = '';\n    elem.isCorrect = false;\n  });\n  return list;\n}\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport AnswerTable from 'components/AnswerTable';\r\nimport CurrentQuestionForm from 'components/CurrentQuestionForm';\r\nimport { shuffle } from 'utils/arrayUtils';\r\n\r\nexport default function Exam() {\r\n  const { id } = useParams();\r\n  const [qList, setQList] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [displayTable, setDisplayTable] = useState(false);\r\n  const [progress, setProgress] = useState(1);\r\n\r\n  useEffect(() => {\r\n    setQList(shuffle(JSON.parse(localStorage.getItem(id))));\r\n  }, [id]);\r\n\r\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\r\n\r\n  // update current question with an answer\r\n  const setNextQuestion = (givenAnswer) => {\r\n    qList[currentIndex].givenAnswer = givenAnswer;\r\n\r\n    if (qList[currentIndex].expectedAnswer === givenAnswer) {\r\n      qList[currentIndex].isCorrect = true;\r\n    }\r\n    const unsweredQuestion = qList[currentIndex];\r\n    qList.splice(currentIndex, 1, unsweredQuestion);\r\n    setQList(qList);\r\n    setCurrentIndex(currentIndex + 1);\r\n    setProgress(calculateProgress());\r\n  };\r\n\r\n  function calculateCompactResult() {\r\n    const totalCount = qList.length;\r\n    const list = Object.values(qList);\r\n    const incorrectAnswers = list.filter((i) => i.isCorrect === false).length;\r\n    const totalCorrectAnswered = list.filter((i) => i.isCorrect === true)\r\n      .length;\r\n\r\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\r\n      console.log('Incorrect result calculation!');\r\n    }\r\n\r\n    return {\r\n      totalCount: totalCount,\r\n      incorrectAnswers: incorrectAnswers,\r\n      totalCorrectAnswered: totalCorrectAnswered,\r\n    };\r\n  }\r\n\r\n  const calculateDatailedResult = () => {\r\n    setDisplayTable(true);\r\n  };\r\n\r\n  const runAgain = () => {\r\n    setDisplayTable(false);\r\n    setCurrentIndex(0);\r\n    setQList(shuffle(JSON.parse(localStorage.getItem(id))));\r\n    setProgress(1);\r\n  };\r\n\r\n  function calculateProgress() {\r\n    return Math.round(((currentIndex + 1) / qList.length) * 100 * 100) / 100;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isListCompleted ? (\r\n        <div>\r\n          <h3>Test completed!</h3>\r\n          <AnswerTable\r\n            results={calculateCompactResult()}\r\n            onClick={calculateDatailedResult}\r\n            detailedResults={qList}\r\n            displayTable={displayTable}\r\n            runAgain={runAgain}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <CurrentQuestionForm\r\n          onClick={setNextQuestion}\r\n          currentQuestion={qList[currentIndex]}\r\n          listTitle={id}\r\n          currentProgress={progress}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nfunction ConfirmDialog(props) {\r\n  return (\r\n    <>\r\n      <Modal show={props.show} onHide={props.onCancel}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.prompt}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={props.onCancel}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={props.onOk}>\r\n            Yes, override\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConfirmDialog;\r\n","import React, { useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport ConfirmDialog from 'components/ConfirmDialog';\r\n\r\nexport default function Qestionnaire(props) {\r\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\r\n  //array with all entered questions\r\n  const [inputFields, setInputFields] = useState(defaultInputFields);\r\n  const [listName, setListName] = useState(\r\n    `List Name - ${localStorage.length + 1}`\r\n  );\r\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\r\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\r\n\r\n  let history = useHistory();\r\n\r\n  // --------------------------\r\n  const addNewOrReplace = (key, value) => {\r\n    const clean = value.filter(isQuestionAndAnswerFilled); \r\n    if (clean.length === 0) {\r\n      setInputFields(defaultInputFields);\r\n      setReplacementNeedsConfirm(false);\r\n      return;\r\n    }\r\n    localStorage.setItem(key, JSON.stringify(clean));\r\n    props.setSize(localStorage.length);\r\n  };\r\n\r\n  const isQuestionAndAnswerFilled = (row) =>\r\n    row.question !== '' && row.expectedAnswer !== '';\r\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\r\n\r\n  const isInvalidForm = () =>\r\n    !listName ||\r\n    (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\r\n\r\n  const isRemoveDisabled = () => inputFields.length === 1;\r\n\r\n  const handleInputNameChange = (event) => {\r\n    setListName(event.target.value);\r\n  };\r\n\r\n  const handleAddFields = (index) => {\r\n    const updatedInputFields = [...inputFields];\r\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\r\n    setInputFields(updatedInputFields);\r\n  };\r\n\r\n  const handleRemoveFields = (index) => {\r\n    const updatedInputFields = [...inputFields];\r\n    updatedInputFields.splice(index, 1);\r\n    setInputFields(updatedInputFields);\r\n  };\r\n\r\n  const handleReplacementConfirm = () => {\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n  };\r\n\r\n  const handleReplacementCancel = () => {\r\n    setReplacementNeedsConfirm(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //filter out all empty inputs\r\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\r\n    setInputFields(cleanQuestions);\r\n\r\n    //prepare and save to the local storage\r\n    const listExist = localStorage.getItem(listName);\r\n    if (listExist) {\r\n      setConfirmDialogPrompt(\r\n        `Name '${listName}' already exists. Do you want to replace existing ?`\r\n      );\r\n\r\n      if (replacementNeedsConfirm) {\r\n        addNewOrReplace(listName, inputFields);\r\n        history.push('/lists');\r\n      }\r\n      setReplacementNeedsConfirm(true);\r\n      return;\r\n    }\r\n\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n  };\r\n\r\n  const handleInputChange = (index, event) => {\r\n    const values = [...inputFields];\r\n    if (event.target.name === 'question') {\r\n      values[index].question = event.target.value;\r\n    } else {\r\n      values[index].expectedAnswer = event.target.value;\r\n    }\r\n    setInputFields(values);\r\n  };\r\n  // --------------------------\r\n  return (\r\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n      <h4 className=\"text-center py-3\">Create new qestionnaire here</h4>\r\n      {/* List name */}\r\n      <Col className=\"text-center\">\r\n        <input\r\n          style={{\r\n            backgroundColor: 'lightGrey',\r\n            borderRadius: '.3rem',\r\n            width: '50%',\r\n            margin: '30px',\r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n          }}\r\n          id=\"listName\"\r\n          value={listName}\r\n          onChange={(event) => handleInputNameChange(event)}\r\n        />\r\n      </Col>\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Render table with questions and answers rows */}\r\n        {inputFields.map((inputField, index) => (\r\n          <div className=\"form-row\" key={index}>\r\n            {/* Line number */}\r\n            <div className=\"fc\">{index + 1}</div>\r\n\r\n            {/* Question */}\r\n            <div className=\"form-group col-sm-7\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Question\"\r\n                id=\"question\"\r\n                name=\"question\"\r\n                value={inputField.question}\r\n                onChange={(event) => handleInputChange(index, event)}\r\n              />\r\n            </div>\r\n\r\n            {/* Answer */}\r\n            <div className=\"form-group col-sm-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Answer\"\r\n                id=\"answer\"\r\n                name=\"answer\"\r\n                value={inputField.expectedAnswer}\r\n                onChange={(event) => handleInputChange(index, event)}\r\n              />\r\n            </div>\r\n\r\n            {/* Add / Remove buttons */}\r\n            <div className=\"form-group col-sm-2\">\r\n              <Button\r\n                variant=\"link\"\r\n                disabled={isRemoveDisabled()}\r\n                onClick={() => handleRemoveFields(index)}\r\n              >\r\n                Remove\r\n              </Button>\r\n              <Button variant=\"link\" onClick={() => handleAddFields(index)}>\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div>\r\n          <Button\r\n            variant=\"info\"\r\n            type=\"submit\"\r\n            onSubmit={handleSubmit}\r\n            disabled={isInvalidForm()}\r\n          >\r\n            Save list\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <ConfirmDialog\r\n        show={replacementNeedsConfirm}\r\n        prompt={confirmDialogPrompt}\r\n        onOk={handleReplacementConfirm}\r\n        onCancel={handleReplacementCancel}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","import Qestionnaire from 'components/Qestionnaire';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default function NewList(props) {\r\n  \r\n    return (\r\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n      <Qestionnaire setSize={props.setSize}/>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport ConfirmDialog from 'components/ConfirmDialog';\r\n\r\nexport default function EditForm(props) {\r\n  let { id } = useParams();\r\n  const [listName, setListName] = useState(id);\r\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\r\n\r\n  const list = localStorage.getItem(id);\r\n  const [inputFields, setInputFields] = useState(\r\n    list !== null ? JSON.parse(list) : defaultInputFields\r\n  );\r\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\r\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\r\n\r\n  let history = useHistory();\r\n\r\n  // --------------------------\r\n  const addNewOrReplace = (key, value) => {\r\n    const clean = value.filter(isQuestionAndAnswerFilled); \r\n    if (clean.length === 0) {\r\n      setInputFields(defaultInputFields);\r\n      setReplacementNeedsConfirm(false);\r\n      return;\r\n    }\r\n    localStorage.setItem(key, JSON.stringify(clean));\r\n    props.setSize(localStorage.length);\r\n  };\r\n\r\n  const isQuestionAndAnswerFilled = (row) =>\r\n    row.question !== '' && row.expectedAnswer !== '';\r\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\r\n\r\n  const isInvalidForm = () =>\r\n    !listName ||\r\n    (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\r\n\r\n  const isRemoveDisabled = () => inputFields.length === 1;\r\n\r\n  const handleInputNameChange = (event) => {\r\n    id = event.target.value;\r\n    setListName(event.target.value);\r\n  };\r\n\r\n  const handleAddFields = (index) => {\r\n    const updatedInputFields = [...inputFields];\r\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\r\n    setInputFields(updatedInputFields);\r\n  };\r\n\r\n  const handleRemoveFields = (index) => {\r\n    const updatedInputFields = [...inputFields];\r\n    updatedInputFields.splice(index, 1);\r\n    setInputFields(updatedInputFields);\r\n  };\r\n\r\n  const handleReplacementConfirm = () => {\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n  };\r\n\r\n  const handleReplacementCancel = () => {\r\n    setReplacementNeedsConfirm(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //filter out all empty inputs\r\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\r\n    setInputFields(cleanQuestions);\r\n\r\n    //prepare and save to the local storage\r\n    const listExist = localStorage.getItem(listName);\r\n    if (listExist) {\r\n      setConfirmDialogPrompt(\r\n        `Name '${listName}' already exists. Do you want to replace existing ?`\r\n      );\r\n\r\n      if (replacementNeedsConfirm) {\r\n        addNewOrReplace(listName, inputFields);\r\n        history.push('/lists');\r\n      }\r\n      setReplacementNeedsConfirm(true);\r\n      return;\r\n    }\r\n\r\n    addNewOrReplace(listName, inputFields);\r\n    history.push('/lists');\r\n  };\r\n\r\n  const handleInputChange = (index, event) => {\r\n    const values = [...inputFields];\r\n    if (event.target.name === 'question') {\r\n      values[index].question = event.target.value;\r\n    } else {\r\n      values[index].expectedAnswer = event.target.value;\r\n    }\r\n    setInputFields(values);\r\n  };\r\n  // --------------------------\r\n  return (\r\n    <>\r\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n        <h4 className=\"text-center py-3\">\r\n          Edit this list ({inputFields.length} questions)\r\n        </h4>\r\n        {/* List name */}\r\n        <Col className=\"text-center\">\r\n          <input\r\n            style={{\r\n              backgroundColor: 'lightGrey',\r\n              borderRadius: '.3rem',\r\n              width: '50%',\r\n              margin: '30px',\r\n              textAlign: 'center',\r\n              fontWeight: 'bold',\r\n            }}\r\n            id=\"listName\"\r\n            value={listName}\r\n            onChange={(event) => handleInputNameChange(event)}\r\n          />\r\n        </Col>\r\n        <form onSubmit={handleSubmit}>\r\n          {/* Render table with questions and answers rows */}\r\n          {inputFields.map((inputField, index) => (\r\n            <div className=\"form-row\" key={index}>\r\n              {/* Line number */}\r\n              <div className=\"fc\">{index + 1}</div>\r\n\r\n              {/* Question */}\r\n              <div className=\"form-group col-sm-7\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Question\"\r\n                  id=\"question\"\r\n                  name=\"question\"\r\n                  value={inputField.question}\r\n                  onChange={(event) => handleInputChange(index, event)}\r\n                />\r\n              </div>\r\n\r\n              {/* Answer */}\r\n              <div className=\"form-group col-sm-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Answer\"\r\n                  id=\"answer\"\r\n                  name=\"answer\"\r\n                  value={inputField.expectedAnswer}\r\n                  onChange={(event) => handleInputChange(index, event)}\r\n                />\r\n              </div>\r\n\r\n              {/* Add / Remove buttons */}\r\n              <div className=\"form-group col-sm-2\">\r\n                <Button\r\n                  variant=\"link\"\r\n                  disabled={isRemoveDisabled()}\r\n                  onClick={() => handleRemoveFields(index)}\r\n                >\r\n                  Remove\r\n                </Button>\r\n                <Button variant=\"link\" onClick={() => handleAddFields(index)}>\r\n                  Add\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <div>\r\n            <Button\r\n              variant=\"info\"\r\n              type=\"submit\"\r\n              onSubmit={handleSubmit}\r\n              disabled={isInvalidForm()}\r\n            >\r\n              Save list\r\n            </Button>\r\n          </div>\r\n        </form>\r\n        <ConfirmDialog\r\n          show={replacementNeedsConfirm}\r\n          prompt={confirmDialogPrompt}\r\n          onOk={handleReplacementConfirm}\r\n          onCancel={handleReplacementCancel}\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nexport default function List(props) {\r\n  const [content, setContent] = useState(fillContentFromStorage());\r\n\r\n  function fillContentFromStorage() {\r\n    const content = new Map();\r\n    for (var i = 0, len = localStorage.length; i < len; ++i) {\r\n      let title = localStorage.key(i);\r\n      let qLength = JSON.parse(localStorage.getItem(title)).length;\r\n      content.set(title, qLength);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  const handleDelete = (title) => {\r\n    localStorage.removeItem(title);\r\n    setContent(fillContentFromStorage());\r\n    props.setSize(localStorage.length);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\r\n        <h4 className=\"text-center py-3\">The list of saved questionaries </h4>\r\n        <Table bordered hover size=\"sm\" variant=\"light\">\r\n          <thead className=\"bg-warning\">\r\n            <tr>\r\n              <th>#</th>\r\n              <th>List title</th>\r\n              <th>Question number</th>\r\n              <th>Run</th>\r\n              <th>Edit</th>\r\n              <th>Remove</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Array.from(content)\r\n              .sort()\r\n              .map((elem, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{elem[0]}</td>\r\n                    <td>{elem[1]}</td>\r\n                    <td>\r\n                      {/* --Run button--- */}\r\n                      <Button variant=\"link\">\r\n                        <Link to={'/questionnaire/' + elem[0]}>&#9655;</Link>\r\n                      </Button>\r\n                    </td>\r\n                    <td>\r\n                      {/* --Edit button--- */}\r\n                      <Button variant=\"link\">\r\n                        <Link to={'/' + elem[0]}>&#x270E;</Link>\r\n                      </Button>\r\n                    </td>\r\n                    <td>\r\n                      {/* --Delete button--- */}\r\n                      <Button\r\n                        variant=\"link\"\r\n                        onClick={() => handleDelete(elem[0])}\r\n                      >\r\n                        &#x2716;\r\n                      </Button>\r\n                    </td>\r\n                    <td>\r\n                      {/* --Action button--- */}\r\n                      <Dropdown>\r\n                        <Dropdown.Toggle\r\n                          variant=\"withe\"\r\n                          id=\"dropdown-basic\"\r\n                          size=\"sm\"\r\n                        >\r\n                          {index > 2 ? (\r\n                            <span>&#9776;</span>\r\n                          ) : (\r\n                            <span>&#128279;</span>\r\n                          )}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                          <Dropdown.Item href=\"#/action-1\">\r\n                            Menu item 1\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item href=\"#/action-2\">Item2</Dropdown.Item>\r\n                          <Dropdown.Divider />\r\n                          <Dropdown.Item href=\"#/action-2\">Item3</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import logo from '../logo.svg';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nexport default function Header(props) {\r\n  const renderTooltip = (props) => (\r\n    <Tooltip id=\"badge-tooltip\" {...props}>\r\n      You have {localStorage.length} lists with questions\r\n    </Tooltip>\r\n  );\r\n\r\n  return (\r\n    <Navbar bg=\"info\" expand=\"lg\" className=\"py-0 full-width\" sticky=\"top\">\r\n      <LinkContainer to=\"/questionnaire\">\r\n        <Navbar.Brand className=\"text-white\">\r\n          <img\r\n            src={logo}\r\n            width=\"60\"\r\n            height=\"60\"\r\n            className=\"d-inline-block\"\r\n            alt=\"questionnaire logo\"\r\n          />\r\n          The Qestionnaire\r\n        </Navbar.Brand>\r\n      </LinkContainer>\r\n\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\r\n        <Navbar.Text>\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to=\"/new\">\r\n              <Nav.Link>Create New</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/lists\">\r\n              <Nav.Link>\r\n                <span>Lists</span>\r\n                <OverlayTrigger\r\n                  placement=\"bottom\"\r\n                  delay={{ show: 250, hide: 400 }}\r\n                  overlay={renderTooltip}\r\n                >\r\n                  <Badge className=\"counter-badge\" variant=\"warning\">\r\n                    {props.size}\r\n                  </Badge>\r\n                </OverlayTrigger>\r\n              </Nav.Link>\r\n            </LinkContainer>\r\n          </Nav>\r\n        </Navbar.Text>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Exam from './pages/Exam';\nimport NewList from './pages/NewList';\nimport EditForm from './pages/EditForm';\nimport List from './pages/List';\nimport { BrowserRouter as HashRouter, Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport { saveToStorage } from 'utils/defaultLists';\nimport React, { useState } from 'react';\n\nfunction App() {\n  // Number of saved lists with questions in local storage\n  const [size, setSize] = useState(localStorage.length);\n\n  //initialize default questionaries and save them to local storage\n  function intitDefaultLists() {\n    localStorage.length == 0 && saveToStorage();\n  }\n\n  return (\n    <div className=\"main-wrapper\">\n      {intitDefaultLists()}\n      <HashRouter>\n        <Header size={size} />\n        <Switch>\n          <Route exact path=\"/questionnaire/:id\" component={Exam} />\n          <Route path=\"/new\" component={() => <NewList setSize={setSize} />} />\n          <Route path=\"/lists\" component={() => <List setSize={setSize} />} />\n          <Route path=\"/:id\" component={() => <EditForm setSize={setSize} />} />\n        </Switch>\n      </HashRouter>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport const saveToStorage = () => {\r\n  const title1 = 'Квадараты чисел от 1 до 10';\r\n  const title2 = 'Кубы чисел от 1 до 10';\r\n  const set1 = [\r\n    { question: '1^2', expectedAnswer: '1' },\r\n    { question: '2^2', expectedAnswer: '4' },\r\n    { question: '3^2', expectedAnswer: '9' },\r\n    { question: '4^2', expectedAnswer: '16' },\r\n    { question: '5^2', expectedAnswer: '25' },\r\n    { question: '6^2', expectedAnswer: '36' },\r\n    { question: '7^2', expectedAnswer: '49' },\r\n    { question: '8^2', expectedAnswer: '64' },\r\n    { question: '9^2', expectedAnswer: '81' },\r\n    { question: '10^2', expectedAnswer: '100' },\r\n  ];\r\n  const set2 = [\r\n    { question: '1^3', expectedAnswer: '1' },\r\n    { question: '2^3', expectedAnswer: '8' },\r\n    { question: '3^3', expectedAnswer: '27' },\r\n    { question: '4^3', expectedAnswer: '64' },\r\n    { question: '5^3', expectedAnswer: '125' },\r\n    { question: '6^3', expectedAnswer: '216' },\r\n    { question: '7^3', expectedAnswer: '343' },\r\n    { question: '8^3', expectedAnswer: '512' },\r\n    { question: '9^3', expectedAnswer: '729' },\r\n    { question: '10^3', expectedAnswer: '1000' },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {localStorage.setItem(title1, JSON.stringify(set1))}\r\n      {localStorage.setItem(title2, JSON.stringify(set2))}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}