{"version":3,"sources":["logo.svg","components/CurrentQuestionForm.jsx","components/AnswerTable.jsx","components/DataProvider.jsx","components/Constructor.jsx","App.js","index.js"],"names":["CurrentQuestionForm","props","useState","givenAnswer","setGivenAnswer","handleClick","onClick","Card","bg","text","style","alignItems","Title","width","currentQuestion","qText","type","value","textAlign","borderRadius","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","Button","variant","className","AnswerTable","displayTable","results","totalCount","listStyleType","totalCorrectAnswered","incorrectAnswers","this","detailedResults","Table","DataProvider","qList","setQList","callBack","hasBeenCalled","setHasBeenCalled","constructor","testDataJsonArray","sort","Math","random","currentIndex","setCurrentIndex","isListCompleted","setDisplayTable","list","Object","values","filter","i","expectedAnswer","console","log","calculateCompactResult","unsweredQuestion","splice","App","Container","src","logo","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c19e176.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport default function CurrentQuestionForm(props) {\r\n  const [givenAnswer, setGivenAnswer] = useState(\"\");\r\n  const handleClick = () => {\r\n    props.onClick(givenAnswer);\r\n    setGivenAnswer(\"\");\r\n  };\r\n\r\n  function handleEnterKey(e) {\r\n    if (e.key === \"Enter\") {\r\n      handleClick();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card bg=\"light\" text=\"dark\" style={{ alignItems: \"center\" }}>\r\n      <Card.Title style={{ width: \"30rem\" }}>\r\n        {props.currentQuestion.qText}\r\n      </Card.Title>\r\n      <input\r\n        type=\"text\"\r\n        value={givenAnswer}\r\n        style={{ textAlign: \"center\", borderRadius: \"5px\", borderWidth: \"1px\" }}\r\n        onChange={(e) => setGivenAnswer(e.target.value)}\r\n        ref={(ref) => ref && ref.focus()}\r\n        onFocus={(e) =>\r\n          e.currentTarget.setSelectionRange(\r\n            e.currentTarget.value.length,\r\n            e.currentTarget.value.length\r\n          )\r\n        }\r\n        onKeyDown={(e) => handleEnterKey(e)}\r\n      />\r\n      <Button\r\n        variant=\"info\"\r\n        style={{ width: \"8rem\" }}\r\n        className=\"mt-2 mb-2\"\r\n        onClick={handleClick}\r\n      >\r\n        Next &gt;&gt;\r\n      </Button>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nexport default function AnswerTable(props) {\r\n  const handleDetailResult = () => {\r\n    props.onClick();\r\n  };\r\n  const [displayTable, setDisplayTable] = useState(false);\r\n\r\n  const renderTable = (qList) => {\r\n    < Table striped bordered hover size=\"sm\" variand=\"warning\" >\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Username</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>1</td>\r\n          <td>Mark</td>\r\n          <td>Otto</td>\r\n          <td>@mdo</td>\r\n        </tr>\r\n        <tr>\r\n          <td>2</td>\r\n          <td>Jacob</td>\r\n          <td>Thornton</td>\r\n          <td>@fat</td>\r\n        </tr>\r\n      </tbody>\r\n    </Table >\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Out of <big>{props.results.totalCount}</big> questions, your result is\r\n      </p>\r\n      <ul style={{ listStyleType: \"none\" }}>\r\n        <li>\r\n          Correct answers: <b>{props.results.totalCorrectAnswered}</b>\r\n        </li>\r\n        <li>Wrong answers: <b>{props.results.incorrectAnswers}</b></li>\r\n      </ul>\r\n      <br />\r\n      <Button\r\n        variant=\"info\"\r\n        className='mb-3'\r\n        onClick={handleDetailResult}>See detailed results\r\n      </Button>\r\n      {/* test */}\r\n      {displayTable ?\r\n        <div> {renderTable(this.props.detailedResults)}</div>\r\n        : <div>---no details--</div>\r\n      }\r\n\r\n    </div >\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport testDataJsonArray from \"../data/test-data.json\";\r\nimport CurrentQuestionForm from \"./CurrentQuestionForm\";\r\nimport AnswerTable from \"./AnswerTable\";\r\nimport constructor from \"./Constructor\";\r\n\r\nexport default function DataProvider() {\r\n  const [qList, setQList] = useState(\"\");\r\n\r\n  // shuffl array once at the begining\r\n  constructor(() => {\r\n    const shuffle = (list) => list.sort(() => 0.5 - Math.random());\r\n    setQList(shuffle(testDataJsonArray));\r\n  });\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\r\n  // const [test, setTest] = useState(\"\");\r\n  const [displayTable, setDisplayTable] = useState(false);\r\n\r\n  // update current question with an answer\r\n  const setNextQuestion = (givenAnswer) => {\r\n    qList[currentIndex].givenAnswer = givenAnswer;\r\n    const unsweredQuestion = qList[currentIndex];\r\n    qList.splice(currentIndex, 1, unsweredQuestion);\r\n    setQList(qList);\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  function calculateCompactResult() {\r\n    const totalCount = qList.length;\r\n    const list = Object.values(qList);\r\n    const incorrectAnswers = list.filter((i) => i.givenAnswer !== i.expectedAnswer).length;\r\n    const totalCorrectAnswered = list.filter((i) => i.expectedAnswer == i.givenAnswer).length;\r\n\r\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\r\n      console.log(\"Incorrect result calculation!\");\r\n    }\r\n\r\n    return {\r\n      totalCount: totalCount,\r\n      incorrectAnswers: incorrectAnswers,\r\n      totalCorrectAnswered: totalCorrectAnswered,\r\n    };\r\n  }\r\n\r\n  const calculateDatailedResult = () => {\r\n    console.log(88);\r\n    setDisplayTable(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isListCompleted ? (\r\n        <div>\r\n          <h2>Test completed!</h2>\r\n          <AnswerTable\r\n            results={calculateCompactResult()}\r\n            onClick={calculateDatailedResult}\r\n            detailedResults={qList}\r\n          //displayTable={true}\r\n          />\r\n        </div>\r\n      ) : (\r\n          <CurrentQuestionForm\r\n            onClick={setNextQuestion}\r\n            currentQuestion={qList[currentIndex]}\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function Constructor(callBack = () => {}) {\r\n  const [hasBeenCalled, setHasBeenCalled] = useState(false);\r\n  if (hasBeenCalled) return;\r\n  callBack();\r\n  setHasBeenCalled(true);\r\n}\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport DataProvider from './components/DataProvider'\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <DataProvider />\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </header>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />, document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}