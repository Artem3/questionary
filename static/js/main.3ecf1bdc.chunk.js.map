{"version":3,"sources":["logo.svg","components/Salute.jsx","hooks/Hooks.jsx","components/AnswerTable.jsx","components/CurrentQuestionForm.jsx","utils/arrayUtils.js","pages/Exam.jsx","components/ConfirmDialog.jsx","components/Qestionnaire.jsx","pages/NewList.jsx","pages/EditForm.jsx","firebase.js","utils/shareHelper.js","pages/List.jsx","pages/SharePage.jsx","pages/Home.js","components/Header.jsx","App.js","utils/defaultLists.jsx","index.js"],"names":["Salute","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","numberOfPieces","recycle","AnswerTable","props","qList","open","setOpen","countRight","valR","results","totalCorrectAnswered","totalCount","Math","round","countWrong","valW","incorrectAnswers","style","margin","ListGroup","variant","Item","marginTop","marginLeft","marginRight","ProgressBar","borderRadius","fontSize","now","label","isSuccess","ButtonToolbar","className","Button","onClick","runAgain","aria-controls","aria-expanded","displayTable","detailedResults","Fade","in","appear","timeout","mountOnEnter","Table","disabled","bordered","id","striped","hover","size","map","q","index","isCorrect","tickMark","question","expectedAnswer","givenAnswer","CurrentQuestionForm","setGivenAnswer","handleClick","listTitle","Card","bg","text","justifyContent","alignItems","padding","Title","currentQuestion","type","value","textAlign","borderWidth","onChange","e","target","ref","focus","onFocus","currentTarget","setSelectionRange","length","onKeyDown","key","handleEnterKey","animated","currentProgress","shuffle","list","forEach","elem","makeValidModel","sort","random","Exam","useParams","setQList","currentIndex","setCurrentIndex","setDisplayTable","progress","setProgress","savedPool","JSON","parse","localStorage","getItem","questions","isListCompleted","Object","values","filter","i","console","log","calculateCompactResult","thisPool","unsweredQuestion","splice","ConfirmDialog","Modal","show","onHide","onCancel","Header","closeButton","Body","prompt","Footer","onOk","Qestionnaire","defaultInputFields","inputFields","setInputFields","listName","setListName","replacementNeedsConfirm","setReplacementNeedsConfirm","confirmDialogPrompt","setConfirmDialogPrompt","history","useHistory","addNewOrReplace","clean","isQuestionAndAnswerFilled","poolToSave","setItem","stringify","setSize","row","handleSubmit","preventDefault","cleanQuestions","push","handleInputChange","event","name","Container","minHeight","color","Col","backgroundColor","fontWeight","handleInputNameChange","onSubmit","inputField","placeholder","updatedInputFields","handleRemoveFields","handleAddFields","NewList","EditForm","toStorage","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","listId","counterCollection","user","userId","nanoid","getOrCreateUserId","userRepo","firestore","collection","sharedRepo","counterRepo","doSharing","title","pool","a","validateData","saveQuestionnairyToDb","Promise","resolve","reject","fetch","response","json","counter","Number","documents","fields","integerValue","error","updatedIndex","doc","set","catch","err","then","toString","prepareDataToSave","List","fillContentFromStorage","content","setContent","Map","len","Array","from","poolAndCode","to","removeItem","sharedCode","Dropdown","Toggle","Menu","code","navigator","clipboard","writeText","Divider","result","updatedPool","handleShare","SharePage","Home","Navbar","expand","sticky","Brand","src","logo","alt","Collapse","Text","Nav","Link","OverlayTrigger","placement","delay","hide","overlay","Tooltip","Badge","App","defaultQuestioneir1","defaultQuestioneir2","saveToStorage","exact","path","component","Share","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ecf1bdc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { useWindowSize } from 'hooks/Hooks.jsx';\nimport Confetti from 'react-confetti';\n\nexport default function Salute() {\n  const { width, height } = useWindowSize();\n\n  return (\n    <Confetti\n      width={width}\n      height={height}\n      numberOfPieces={550}\n      recycle={false}\n    />\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport function useWindowSize() {\n\n  // Initialize state with undefined width/height so server and client renders match\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n   return () => window.removeEventListener(\"resize\", handleResize);\n\n  }, []); // Empty array ensures that effect is only run on mount\n  \n  return windowSize;\n}","import React, { useState } from 'react';\n\nimport Salute from 'components/Salute';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Fade from 'react-bootstrap/Fade';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nexport default function AnswerTable(props) {\n  const [open, setOpen] = useState(false);\n  const handResultlClick = () => {\n    setOpen(!open);\n    props.onClick();\n  };\n\n  const renderTable = (qList) => (\n    <Fade in={open} appear timeout={600} mountOnEnter>\n      <Table\n        disabled\n        bordered\n        id=\"fade-tbl\"\n        striped\n        hover\n        size=\"sm\"\n        variant=\"light\"\n        className=\"mt-3\"\n      >\n        <thead className=\"bg-warning\">\n          <tr>\n            <th>#</th>\n            <th>Question</th>\n            <th>Expected answer</th>\n            <th>Your answer</th>\n            <th>Correctness</th>\n          </tr>\n        </thead>\n        <tbody>\n          {qList.map((q, index) => {\n            const variant = q.isCorrect ? 'success' : 'danger';\n            const tickMark = q.isCorrect ? <span>&#10003;</span> : '';\n            return (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>{q.question}</td>\n                <td>{q.expectedAnswer}</td>\n                <td>{q.givenAnswer}</td>\n                <td>\n                  <ListGroup.Item variant={variant}>{tickMark}</ListGroup.Item>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Fade>\n  );\n\n  // Display salut or not\n  const isSuccess = () => {\n    const valR =\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount;\n    return Math.round(valR * 100) / 100 > 99;\n  };\n\n  // Calculate amount of correct answers\n  function countRight() {\n    const valR =\n      (props.results.totalCorrectAnswered * 100) / props.results.totalCount;\n    return Math.round(valR * 100) / 100;\n  }\n\n  // Calculate amount of wrong answers\n  function countWrong() {\n    const valW =\n      (props.results.incorrectAnswers * 100) / props.results.totalCount;\n    return Math.round(valW * 100) / 100;\n  }\n\n  return (\n    <div>\n      <p>\n        Out of <big>{props.results.totalCount}</big> questions, your result is\n      </p>\n\n      <div\n        style={{\n          width: 300,\n          margin: 'auto',\n        }}\n      >\n        <ListGroup variant=\"flush\">\n          {(() => {\n            if (props.results.totalCorrectAnswered > 0) {\n              return (\n                <ListGroup.Item variant=\"success\">\n                  Correct answers: <b>{props.results.totalCorrectAnswered}</b>\n                </ListGroup.Item>\n              );\n            }\n          })()}\n\n          {(() => {\n            if (props.results.incorrectAnswers > 0) {\n              return (\n                <ListGroup.Item variant=\"danger\">\n                  Wrong answers: <b>{props.results.incorrectAnswers}</b>\n                </ListGroup.Item>\n              );\n            }\n          })()}\n        </ListGroup>\n      </div>\n\n      <div\n        style={{\n          width: 600,\n          marginTop: '1.2rem',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n        }}\n      >\n        <ProgressBar\n          style={{ borderRadius: '2rem', height: '1.3rem', fontSize: '1.1rem' }}\n        >\n          <ProgressBar\n            variant=\"success\"\n            now={countRight()}\n            label={countRight() + '%'}\n            key={1}\n          />\n          <ProgressBar\n            variant=\"danger\"\n            now={countWrong()}\n            label={countWrong() + '%'}\n            key={2}\n          />\n        </ProgressBar>\n        {isSuccess() && <Salute />}\n      </div>\n\n      <ButtonToolbar className=\"justify-content-between\">\n        {/* Run again button */}\n        <Button variant=\"warning\" className=\"mt-5\" onClick={props.runAgain}>\n          Run again\n        </Button>\n\n        {/* Open table with results button */}\n        <Button\n          variant=\"info\"\n          className=\"mt-5\"\n          onClick={handResultlClick}\n          aria-controls=\"fade-tbl\"\n          aria-expanded={open}\n        >\n          {open ? 'Close' : 'Open'} detailed results\n        </Button>\n      </ButtonToolbar>\n\n      {props.displayTable && renderTable(props.detailedResults)}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nexport default function CurrentQuestionForm(props) {\n  const [givenAnswer, setGivenAnswer] = useState('');\n  const handleClick = () => {\n    props.onClick(givenAnswer);\n    setGivenAnswer('');\n  };\n\n  const cardStyle = {\n    justifyContent: 'space-between',\n    height: '14rem',\n    alignItems: 'center',\n    padding: '2rem',\n  };\n\n  const inputStyle = {\n    textAlign: 'center',\n    borderRadius: '5px',\n    borderWidth: '1px',\n  };\n\n  function handleEnterKey(e) {\n    if (e.key === 'Enter') {\n      handleClick();\n    }\n  }\n\n  return (\n    <>\n      {/* Questionary title */}\n      <h4 className=\"text-center py-3\">{props.listTitle}</h4>\n\n      {/* Display question card */}\n      <Card bg=\"light\" text=\"dark\" style={cardStyle}>\n        <Card.Title style={{ width: '30rem' }}>\n          {props.currentQuestion.question}\n        </Card.Title>\n        <input\n          type=\"text\"\n          value={givenAnswer}\n          style={inputStyle}\n          onChange={(e) => setGivenAnswer(e.target.value)}\n          ref={(ref) => ref && ref.focus()}\n          onFocus={(e) =>\n            e.currentTarget.setSelectionRange(\n              e.currentTarget.value.length,\n              e.currentTarget.value.length\n            )\n          }\n          onKeyDown={(e) => handleEnterKey(e)}\n        />\n        {/* Next >> button */}\n        <Button\n          variant=\"info\"\n          style={{ width: '8rem' }}\n          className=\"mt-2 mb-2\"\n          onClick={handleClick}\n        >\n          Next &gt;&gt;\n        </Button>\n      </Card>\n      <ProgressBar variant=\"warning\" animated now={props.currentProgress} />\n    </>\n  );\n}\n","export const shuffle = (list) => {\n  const model = makeValidModel(list);\n  return model.sort(() => 0.5 - Math.random());\n};\n\nfunction makeValidModel(list) {\n  if (list == null) {\n    return [\n      {\n        question: '',\n        expectedAnswer: '',\n        givenAnswer: '',\n        isCorrect: false,\n      },\n    ];\n  }\n\n  list.forEach((elem) => {\n    elem.givenAnswer = '';\n    elem.isCorrect = false;\n  });\n  return list;\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport AnswerTable from 'components/AnswerTable';\nimport CurrentQuestionForm from 'components/CurrentQuestionForm';\nimport { shuffle } from 'utils/arrayUtils';\n\nexport default function Exam() {\n  const { id } = useParams();\n  const [qList, setQList] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [displayTable, setDisplayTable] = useState(false);\n  const [progress, setProgress] = useState(1);\n\n  useEffect(() => {\n    const savedPool = JSON.parse(localStorage.getItem(id));\n    setQList(shuffle(savedPool.questions));\n  }, [id]);\n\n  const isListCompleted = currentIndex <= qList.length - 1 ? false : true;\n\n  // update current question with an answer\n  const setNextQuestion = (givenAnswer) => {\n    qList[currentIndex].givenAnswer = givenAnswer;\n\n    if (qList[currentIndex].expectedAnswer === givenAnswer) {\n      qList[currentIndex].isCorrect = true;\n    }\n    const unsweredQuestion = qList[currentIndex];\n    qList.splice(currentIndex, 1, unsweredQuestion);\n    setQList(qList);\n    setCurrentIndex(currentIndex + 1);\n    setProgress(calculateProgress());\n  };\n\n  function calculateCompactResult() {\n    const totalCount = qList.length;\n    const list = Object.values(qList);\n    const incorrectAnswers = list.filter((i) => i.isCorrect === false).length;\n    const totalCorrectAnswered = list.filter((i) => i.isCorrect === true).length;\n\n    if (incorrectAnswers + totalCorrectAnswered !== totalCount) {\n      console.log('Incorrect result calculation!');\n    }\n\n    return {\n      totalCount: totalCount,\n      incorrectAnswers: incorrectAnswers,\n      totalCorrectAnswered: totalCorrectAnswered,\n    };\n  }\n\n  const calculateDatailedResult = () => {\n    setDisplayTable(true);\n  };\n\n  const runAgain = () => {\n    setDisplayTable(false);\n    setCurrentIndex(0);\n    const thisPool = JSON.parse(localStorage.getItem(id));\n    setQList(shuffle(thisPool.questions));\n    setProgress(1);\n  };\n\n  function calculateProgress() {\n    return Math.round(((currentIndex + 1) / qList.length) * 100 * 100) / 100;\n  }\n\n  return (\n    <div>\n      {isListCompleted ? (\n        <div>\n          <h3>Test completed!</h3>\n          <AnswerTable\n            results={calculateCompactResult()}\n            onClick={calculateDatailedResult}\n            detailedResults={qList}\n            displayTable={displayTable}\n            runAgain={runAgain}\n          />\n        </div>\n      ) : (\n        <CurrentQuestionForm\n          onClick={setNextQuestion}\n          currentQuestion={qList[currentIndex]}\n          listTitle={id}\n          currentProgress={progress}\n        />\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nfunction ConfirmDialog(props) {\n  return (\n    <>\n      <Modal show={props.show} onHide={props.onCancel}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{props.prompt}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={props.onCancel}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={props.onOk}>\n            Yes, override\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default ConfirmDialog;\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport { useHistory } from 'react-router-dom';\n\nimport ConfirmDialog from 'components/ConfirmDialog';\n\nexport default function Qestionnaire(props) {\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\n  //array with all entered questions\n  const [inputFields, setInputFields] = useState(defaultInputFields);\n  const [listName, setListName] = useState(`List Name - ${localStorage.length}`);\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\n\n  let history = useHistory();\n\n  // --------------------------\n  const addNewOrReplace = (key, value) => {\n    const clean = value.filter(isQuestionAndAnswerFilled);\n    if (clean.length === 0) {\n      setInputFields(defaultInputFields);\n      setReplacementNeedsConfirm(false);\n      return;\n    }\n    const poolToSave = { questions: clean };\n    localStorage.setItem(key, JSON.stringify(poolToSave));\n    props.setSize(localStorage.length - 1);\n  };\n\n  const isQuestionAndAnswerFilled = (row) => row.question !== '' && row.expectedAnswer !== '';\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\n\n  const isInvalidForm = () => !listName || (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\n\n  const isRemoveDisabled = () => inputFields.length === 1;\n\n  const handleInputNameChange = (event) => {\n    setListName(event.target.value);\n  };\n\n  const handleAddFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleRemoveFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index, 1);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleReplacementConfirm = () => {\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleReplacementCancel = () => {\n    setReplacementNeedsConfirm(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //filter out all empty inputs\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\n    setInputFields(cleanQuestions);\n\n    //prepare and save to the local storage\n    const listExist = localStorage.getItem(listName);\n    if (listExist) {\n      setConfirmDialogPrompt(`Name '${listName}' already exists. Do you want to replace existing ?`);\n\n      if (replacementNeedsConfirm) {\n        addNewOrReplace(listName, inputFields);\n        history.push('/lists');\n      }\n      setReplacementNeedsConfirm(true);\n      return;\n    }\n\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleInputChange = (index, event) => {\n    const values = [...inputFields];\n    if (event.target.name === 'question') {\n      values[index].question = event.target.value;\n    } else {\n      values[index].expectedAnswer = event.target.value;\n    }\n    setInputFields(values);\n  };\n  // --------------------------\n  return (\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\n      <h4 className=\"text-center py-3\">Create new qestionnaire here</h4>\n      {/* List name */}\n      <Col className=\"text-center\">\n        <input\n          style={{\n            backgroundColor: 'lightGrey',\n            borderRadius: '.3rem',\n            width: '50%',\n            margin: '30px',\n            textAlign: 'center',\n            fontWeight: 'bold',\n          }}\n          id=\"listName\"\n          value={listName}\n          onChange={(event) => handleInputNameChange(event)}\n        />\n      </Col>\n      <form onSubmit={handleSubmit}>\n        {/* Render table with questions and answers rows */}\n        {inputFields.map((inputField, index) => (\n          <div className=\"form-row\" key={index}>\n            {/* Line number */}\n            <div className=\"fc\">{index + 1}</div>\n\n            {/* Question */}\n            <div className=\"form-group col-sm-7\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Question\"\n                id=\"question\"\n                name=\"question\"\n                value={inputField.question}\n                onChange={(event) => handleInputChange(index, event)}\n              />\n            </div>\n\n            {/* Answer */}\n            <div className=\"form-group col-sm-2\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Answer\"\n                id=\"answer\"\n                name=\"answer\"\n                value={inputField.expectedAnswer}\n                onChange={(event) => handleInputChange(index, event)}\n              />\n            </div>\n\n            {/* Add / Remove buttons */}\n            <div className=\"form-group col-sm-2\">\n              <Button variant=\"link\" disabled={isRemoveDisabled()} onClick={() => handleRemoveFields(index)}>\n                Remove\n              </Button>\n              <Button variant=\"link\" onClick={() => handleAddFields(index)}>\n                Add\n              </Button>\n            </div>\n          </div>\n        ))}\n        <div>\n          <Button variant=\"info\" type=\"submit\" onSubmit={handleSubmit} disabled={isInvalidForm()}>\n            Save list\n          </Button>\n        </div>\n      </form>\n      <ConfirmDialog\n        show={replacementNeedsConfirm}\n        prompt={confirmDialogPrompt}\n        onOk={handleReplacementConfirm}\n        onCancel={handleReplacementCancel}\n      />\n    </Container>\n  );\n}\n","import Qestionnaire from 'components/Qestionnaire';\nimport Container from 'react-bootstrap/Container';\n\nexport default function NewList(props) {\n  return (\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\n      <Qestionnaire setSize={props.setSize} />\n    </Container>\n  );\n}\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n\nimport ConfirmDialog from 'components/ConfirmDialog';\n\nexport default function EditForm(props) {\n  let { id } = useParams();\n  const [listName, setListName] = useState(id);\n  const defaultInputFields = [{ question: '', expectedAnswer: '' }];\n\n  const list = localStorage.getItem(id);\n  const [inputFields, setInputFields] = useState(list !== null ? JSON.parse(list).questions : defaultInputFields);\n  const [replacementNeedsConfirm, setReplacementNeedsConfirm] = useState(false);\n  const [confirmDialogPrompt, setConfirmDialogPrompt] = useState('');\n\n  let history = useHistory();\n\n  // --------------------------\n  const addNewOrReplace = (key, value) => {\n    const clean = value.filter(isQuestionAndAnswerFilled);\n    if (clean.length === 0) {\n      setInputFields(defaultInputFields);\n      setReplacementNeedsConfirm(false);\n      return;\n    }\n    const toStorage = { questions: clean };\n    localStorage.setItem(key, JSON.stringify(toStorage));\n    props.setSize(localStorage.length - 1);\n  };\n\n  const isQuestionAndAnswerFilled = (row) => row.question !== '' && row.expectedAnswer !== '';\n  //TODO: regarding the row below - needs to add red borders around invalid inputs\n\n  const isInvalidForm = () => !listName || (inputFields.length === 1 && !isQuestionAndAnswerFilled(inputFields[0]));\n\n  const isRemoveDisabled = () => inputFields.length === 1;\n\n  const handleInputNameChange = (event) => {\n    id = event.target.value;\n    setListName(event.target.value);\n  };\n\n  const handleAddFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index + 1, 0, ...defaultInputFields);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleRemoveFields = (index) => {\n    const updatedInputFields = [...inputFields];\n    updatedInputFields.splice(index, 1);\n    setInputFields(updatedInputFields);\n  };\n\n  const handleReplacementConfirm = () => {\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleReplacementCancel = () => {\n    setReplacementNeedsConfirm(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //filter out all empty inputs\n    let cleanQuestions = inputFields.filter(isQuestionAndAnswerFilled);\n    setInputFields(cleanQuestions);\n\n    //prepare and save to the local storage\n    const listExist = localStorage.getItem(listName);\n    if (listExist) {\n      setConfirmDialogPrompt(`Name '${listName}' already exists. Do you want to replace existing ?`);\n\n      if (replacementNeedsConfirm) {\n        addNewOrReplace(listName, inputFields);\n        history.push('/lists');\n      }\n      setReplacementNeedsConfirm(true);\n      return;\n    }\n\n    addNewOrReplace(listName, inputFields);\n    history.push('/lists');\n  };\n\n  const handleInputChange = (index, event) => {\n    const values = [...inputFields];\n    if (event.target.name === 'question') {\n      values[index].question = event.target.value;\n    } else {\n      values[index].expectedAnswer = event.target.value;\n    }\n    setInputFields(values);\n  };\n  // --------------------------\n  return (\n    <>\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\n        <h4 className=\"text-center py-3\">Edit this list ({inputFields.length} questions)</h4>\n        {/* List name */}\n        <Col className=\"text-center\">\n          <input\n            style={{\n              backgroundColor: 'lightGrey',\n              borderRadius: '.3rem',\n              width: '50%',\n              margin: '30px',\n              textAlign: 'center',\n              fontWeight: 'bold',\n            }}\n            id=\"listName\"\n            value={listName}\n            onChange={(event) => handleInputNameChange(event)}\n          />\n        </Col>\n        <form onSubmit={handleSubmit}>\n          {/* Render table with questions and answers rows */}\n          {inputFields.map((inputField, index) => (\n            <div className=\"form-row\" key={index}>\n              {/* Line number */}\n              <div className=\"fc\">{index + 1}</div>\n\n              {/* Question */}\n              <div className=\"form-group col-sm-7\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Question\"\n                  id=\"question\"\n                  name=\"question\"\n                  value={inputField.question}\n                  onChange={(event) => handleInputChange(index, event)}\n                />\n              </div>\n\n              {/* Answer */}\n              <div className=\"form-group col-sm-2\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Answer\"\n                  id=\"answer\"\n                  name=\"answer\"\n                  value={inputField.expectedAnswer}\n                  onChange={(event) => handleInputChange(index, event)}\n                />\n              </div>\n\n              {/* Add / Remove buttons */}\n              <div className=\"form-group col-sm-2\">\n                <Button variant=\"link\" disabled={isRemoveDisabled()} onClick={() => handleRemoveFields(index)}>\n                  Remove\n                </Button>\n                <Button variant=\"link\" onClick={() => handleAddFields(index)}>\n                  Add\n                </Button>\n              </div>\n            </div>\n          ))}\n          <div>\n            <Button variant=\"info\" type=\"submit\" onSubmit={handleSubmit} disabled={isInvalidForm()}>\n              Save list\n            </Button>\n          </div>\n        </form>\n        <ConfirmDialog\n          show={replacementNeedsConfirm}\n          prompt={confirmDialogPrompt}\n          onOk={handleReplacementConfirm}\n          onCancel={handleReplacementCancel}\n        />\n      </Container>\n    </>\n  );\n}\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_MESSAGING_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\nconsole.log('REACT_APP_MESSAGING_APP_ID:');\nconsole.log(process.env.REACT_APP_MESSAGING_APP_ID);\nexport default firebase;\n","import { nanoid } from 'nanoid';\nimport firebase from './../firebase';\n\nlet currentIndex = 0;\nlet listId = 'default';\nconst counterId = 'counterId';\nconst sharedCollection = 'shared';\nconst counterCollection = 'counter';\nconst user = getOrCreateUserId();\nconst userRepo = firebase.firestore().collection(user);\nconst sharedRepo = firebase.firestore().collection(sharedCollection);\nconst counterRepo = firebase.firestore().collection(counterCollection);\n\nconst counterUrl =\n  'https://firestore.googleapis.com/v1/projects/questionnaire-4f52b/databases/(default)/documents/' + counterCollection;\n// const shareCollectionUrl =\n//   'https://firestore.googleapis.com/v1/projects/questionnaire-4f52b/databases/(default)/documents/' + sharedCollection;\n\nexport const doSharing = async (title, pool) => {\n  if (!validateData(title, pool)) {\n    return;\n  }\n  console.log('-Start sharing--');\n  await saveQuestionnairyToDb(title, pool);\n  await getSharedCounter();\n  await increaseSharedCounter();\n  await saveSharedCode();\n  console.log('-Finish sharing--');\n\n  return currentIndex;\n};\n\nfunction saveQuestionnairyToDb(title, pool) {\n  return new Promise((resolve, reject) => {\n    listId = 'listId:' + nanoid(10);\n    const doc = prepareDataToSave(title, pool);\n    userRepo\n      .doc(listId)\n      .set(doc)\n      .catch((err) => {\n        reject(err);\n      })\n      .then(resolve);\n    console.log('0. Questionnairy saved: ', listId);\n  });\n}\n\nfunction getSharedCounter() {\n  return new Promise((resolve, reject) => {\n    (async () => {\n      try {\n        const response = await fetch(counterUrl);\n        const json = await response.json();\n        let counter = Number(json.documents[0].fields.index.integerValue);\n        currentIndex = counter;\n        console.log('1. Current conter:', counter);\n        resolve(counter);\n      } catch (err) {\n        console.error('Error in getSharedCounter(): ', err);\n        reject(err);\n      }\n    })();\n  });\n}\n\nfunction increaseSharedCounter() {\n  return new Promise((resolve, reject) => {\n    const updatedIndex = currentIndex + 1;\n    console.log('3: Updated counter: ', updatedIndex);\n    counterRepo\n      .doc(counterId)\n      .set({ index: updatedIndex })\n      .catch((err) => {\n        console.error('Error in increaseSharedCounter(): ', err);\n        reject(err);\n      })\n      .then(resolve);\n    console.log('4: Updated counter saved OK');\n  });\n}\n\nfunction saveSharedCode() {\n  return new Promise((resolve, reject) => {\n    sharedRepo\n      .doc(currentIndex.toString())\n      .set({ userId: user, listId: listId })\n      .catch((err) => {\n        reject(err);\n      })\n      .then(resolve);\n    console.log('5. Shared code saved OK');\n  });\n}\n\nfunction validateData(title, pool) {\n  let valid = true;\n  if (user == null) {\n    console.error('Validation error: userId is null');\n    return false;\n  }\n  if (title === '' || pool === '') {\n    console.error('Validation error: title or pool is empty');\n    return false;\n  }\n  return valid;\n}\n\nfunction prepareDataToSave(title, pool) {\n  const strToSave = JSON.stringify({ listTitle: title, questions: pool });\n  const toDb = { doc: strToSave };\n  return toDb;\n}\n\nfunction getOrCreateUserId() {\n  if (localStorage.getItem('userId') == null) {\n    const userId = 'user:' + nanoid(7);\n    localStorage.setItem('userId', userId);\n    return userId;\n  } else {\n    return localStorage.getItem('userId');\n  }\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { doSharing } from 'utils/shareHelper';\n\nexport default function List(props) {\n  const [content, setContent] = useState(fillContentFromStorage());\n\n  function fillContentFromStorage() {\n    const content = new Map();\n    for (var i = 0, len = localStorage.length; i < len; ++i) {\n      let title = localStorage.key(i);\n      if (title === 'userId') {\n        continue;\n      }\n      const savedPool = JSON.parse(localStorage.getItem(title));\n      content.set(title, savedPool);\n    }\n    return content;\n  }\n\n  const handleDelete = (title) => {\n    localStorage.removeItem(title);\n    setContent(fillContentFromStorage());\n    props.setSize(localStorage.length - 1);\n  };\n\n  const handleShare = (title) => {\n    const pool = localStorage.getItem(title);\n    doSharing(title, pool).then((result) => {\n      const updatedPool = {\n        questions: JSON.parse(pool).questions,\n        sharedCode: result,\n      };\n      localStorage.setItem(title, JSON.stringify(updatedPool));\n      setContent(fillContentFromStorage());\n    });\n  };\n\n  const handleCopyToClipboard = (code) => {\n    navigator.clipboard.writeText(code);\n  };\n\n  const handleStopSharing = (code) => {\n    //remove record from SharedCode table\n  };\n\n  return (\n    <>\n      <Container style={{ minHeight: '100vh', color: 'white' }}>\n        <h4 className=\"text-center py-3\">The list of saved questionaries </h4>\n        <Table bordered hover size=\"sm\" variant=\"light\">\n          <thead className=\"bg-warning\">\n            <tr>\n              <th>#</th>\n              <th>Questionnaire title</th>\n              <th>Number of questions</th>\n              <th>Run</th>\n              <th>Edit</th>\n              <th>Remove</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from(content, ([title, poolAndCode]) => ({ title, poolAndCode }))\n              .sort()\n              .map((elem, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>{elem.title}</td>\n                    <td>{elem.poolAndCode.questions.length}</td>\n                    <td>\n                      {/* --Run button--- */}\n                      <Button variant=\"link\">\n                        <Link to={`/${elem.title}/exam`}>&#9655;</Link>\n                      </Button>\n                    </td>\n                    <td>\n                      {/* --Edit button--- */}\n                      <Button variant=\"link\">\n                        <Link to={`/${elem.title}/edit`}>&#x270E;</Link>\n                      </Button>\n                    </td>\n                    <td>\n                      {/* --Delete button--- */}\n                      <Button variant=\"link\" onClick={() => handleDelete(elem.title)}>\n                        &#x2716;\n                      </Button>\n                    </td>\n                    <td>\n                      {/* --Action button--- */}\n                      {elem.poolAndCode.sharedCode ? (\n                        <>\n                          {elem.poolAndCode.sharedCode}\n                          <Dropdown>\n                            <Dropdown.Toggle variant=\"outline-info\">&#9881;</Dropdown.Toggle>\n                            <Dropdown.Menu>\n                              <Dropdown.Item onClick={() => handleCopyToClipboard(elem.poolAndCode.sharedCode)}>\n                                Copy code &#9993;\n                              </Dropdown.Item>\n                              <Dropdown.Divider />\n                              <Dropdown.Item onClick={() => handleStopSharing(elem.poolAndCode.sharedCode)}>\n                                Stop sharing\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        </>\n                      ) : (\n                        <Button variant=\"dark\" onClick={() => handleShare(elem.title)}>\n                          Share this pool &#9741;\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n      </Container>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport firebase from '../firebase';\nimport { v4 as uuid } from 'uuid';\n\nfunction SharePage() {\n  // const axios = require('axios').default;\n  // const ref = firebase.firestore().collection('userId-9'); // ownerId\n\n  const getAllLists = () => {\n    const url =\n      'https://firestore.googleapis.com/v1/projects/questionnaire-4f52b/databases/(default)/documents/userId-9/';\n    // axios\n    //   .get(url)\n    //   .then(function (response) {\n    //     console.log(response.data.documents);\n    //     response.data.documents.map((elem) => console.log(elem.name));\n    //     console.log('---------');\n    //     response.data.documents.map((elem) => console.log(elem.fields));\n      \n    //   })\n    //   .catch(function (error) {\n    //     console.log(error);\n    //   });\n  };\n\n  const createList = () => {\n    const test = {\n      listId: 'listId-11',\n      listName: 'lisName-11',\n      questions: [\n        { question: 'q9', expectedAnswer: 'a9' },\n        { question: 'q10', expectedAnswer: 'a10' },\n      ],\n    };\n    const testString = JSON.stringify(test);\n    const toDbObj = { doc: testString };\n\n    // ref\n    //   .doc('listId-' + uuid()) //listId\n    //   .set(toDbObj)\n    //   .catch((err) => {\n    //     console.error(err);\n    //   });\n    // console.log('createList-after');\n  };\n  // ----------------------------------------------------\n  const cardStyle = {\n    justifyContent: 'space-between',\n    height: '14rem',\n    alignItems: 'center',\n    padding: '2rem',\n  };\n\n  const inputStyle = {\n    textAlign: 'center',\n    borderRadius: '5px',\n    borderWidth: '1px',\n  };\n\n  const handleImportClick = () => {\n    console.log('btn Import clicked');\n  };\n\n  return (\n    <Container style={{ minHeight: '100vh', color: 'white' }}>\n      <h4 className=\"text-center py-3\">Import share questionneries </h4>\n      <Card bg=\"light\" text=\"dark\" style={cardStyle}>\n        <Card.Title style={{ width: '30rem' }}>\n          Enter a code to the field:\n        </Card.Title>\n\n        <input type=\"number\" \n        placeholder=\"351\" \n        style={inputStyle} \n        onChange={(e) => console.log(e.target.value)} />\n        \n        {/* Import button */}\n        <Button \n        variant=\"warning\" \n        style={{ width: '8rem' }} \n        className=\"mt-2 mb-2\" \n        onClick={handleImportClick}> \n          Import {' '} &#8630;\n        </Button>\n      </Card>\n    </Container>\n  );\n}\n\nexport default SharePage;\n","import React from 'react';\n\nexport default function Home() {\n  return <h1>Welcome to the questionnaire!!</h1>;\n}\n","import logo from '../logo.svg';\nimport Badge from 'react-bootstrap/Badge';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nexport default function Header(props) {\n  const renderTooltip = (props) => (\n    <Tooltip id=\"badge-tooltip\" {...props}>\n      You have {localStorage.length - 1} lists with questions\n    </Tooltip>\n  );\n\n  return (\n    <Navbar bg=\"info\" expand=\"lg\" className=\"py-0 full-width\" sticky=\"top\">\n      <LinkContainer to=\"/\">\n        {/* logo */}\n        <Navbar.Brand className=\"text-white\">\n          <img src={logo} width=\"60\" height=\"60\" className=\"d-inline-block\" alt=\"questionnaire logo\" />\n          The Qestionnaire\n        </Navbar.Brand>\n      </LinkContainer>\n\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n        <Navbar.Text>\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/lists\">\n              <Nav.Link>\n                <span>Lists</span>\n                <OverlayTrigger placement=\"bottom\" delay={{ show: 250, hide: 400 }} overlay={renderTooltip}>\n                  <Badge className=\"counter-badge\" variant=\"warning\">\n                    {props.size}\n                  </Badge>\n                </OverlayTrigger>\n              </Nav.Link>\n            </LinkContainer>\n\n            {/* vertial separator */}\n            <Nav.Link>\n              <li>&#124;</li>\n            </Nav.Link>\n\n            <LinkContainer to=\"/new\">\n              <Nav.Link>Create New</Nav.Link>\n            </LinkContainer>\n\n            {/* vertial separator */}\n            <Nav.Link>\n              <li>&#124;</li>\n            </Nav.Link>\n\n            <LinkContainer to=\"/share\">\n              <Nav.Link>Import</Nav.Link>\n            </LinkContainer>\n          </Nav>\n        </Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Exam from './pages/Exam';\nimport NewList from './pages/NewList';\nimport EditForm from './pages/EditForm';\nimport List from './pages/List';\nimport Share from './pages/SharePage';\nimport Home from './pages/Home';\nimport Header from './components/Header';\n\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { saveToStorage, generateId } from 'utils/defaultLists';\nimport React, { useState } from 'react';\n\nfunction App() {\n  // Number of saved lists with questions in local storage\n  const [size, setSize] = useState(localStorage.length - 1); // - 1 is userId\n\n  //initialize default questionaries and save them to local storage\n  function intitDefaultLists() {\n    localStorage.length < 2 && saveToStorage();\n  }\n  //generate user Id if not exist in local storage\n  function generateUserId() {\n    localStorage.getItem('userId') == null && generateId();\n  }\n\n  return (\n    <div className=\"main-wrapper\">\n      {generateUserId()}\n      {intitDefaultLists()}\n      <HashRouter>\n        <Header size={size} />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/new\" component={() => <NewList setSize={setSize} />} />\n          <Route path=\"/lists\" component={() => <List setSize={setSize} />} />\n          <Route path=\"/share\" component={Share} />\n          <Route path=\"/:id/edit\" component={() => <EditForm setSize={setSize} />} />\n          <Route path=\"/:id/exam\" component={Exam} />\n        </Switch>\n      </HashRouter>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\n\n// default questionnaires\nexport const saveToStorage = () => {\n  const title1 = 'Квадараты чисел от 1 до 10';\n  const title2 = 'Кубы чисел от 1 до 10';\n  const set1 = [\n    { question: '1^2', expectedAnswer: '1' },\n    { question: '2^2', expectedAnswer: '4' },\n    { question: '3^2', expectedAnswer: '9' },\n    { question: '4^2', expectedAnswer: '16' },\n    { question: '5^2', expectedAnswer: '25' },\n    { question: '6^2', expectedAnswer: '36' },\n    { question: '7^2', expectedAnswer: '49' },\n    { question: '8^2', expectedAnswer: '64' },\n    { question: '9^2', expectedAnswer: '81' },\n    { question: '10^2', expectedAnswer: '100' },\n  ];\n  const set2 = [\n    { question: '1^3', expectedAnswer: '1' },\n    { question: '2^3', expectedAnswer: '8' },\n    { question: '3^3', expectedAnswer: '27' },\n    { question: '4^3', expectedAnswer: '64' },\n    { question: '5^3', expectedAnswer: '125' },\n    { question: '6^3', expectedAnswer: '216' },\n    { question: '7^3', expectedAnswer: '343' },\n    { question: '8^3', expectedAnswer: '512' },\n    { question: '9^3', expectedAnswer: '729' },\n    { question: '10^3', expectedAnswer: '1000' },\n  ];\n  const defaultQuestioneir1 = {\n    questions: set1,\n  };\n\n  const defaultQuestioneir2 = {\n    questions: set2,\n  };\n\n  return (\n    <>\n      {localStorage.setItem(title1, JSON.stringify(defaultQuestioneir1))}\n      {localStorage.setItem(title2, JSON.stringify(defaultQuestioneir2))}\n    </>\n  );\n};\n\nexport const generateId = () => {\n  localStorage.setItem('userId', 'user:' + nanoid(7));\n  console.log('New UserId generated');\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}